import{_ as n,o as s,c as a,e}from"./app-e94K_zRz.js";const t={},l=e(`<h2 id="一-html-css-部分" tabindex="-1"><a class="header-anchor" href="#一-html-css-部分"><span>一. Html / Css 部分</span></a></h2><h3 id="_1-html元素命名统一采用串式命名法" tabindex="-1"><a class="header-anchor" href="#_1-html元素命名统一采用串式命名法"><span>1. Html元素命名统一采用串式命名法</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 错误实例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”appContainer”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 正确实例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”app-container”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-css元素命名统一采用串式命名法" tabindex="-1"><a class="header-anchor" href="#_2-css元素命名统一采用串式命名法"><span>2. Css元素命名统一采用串式命名法</span></a></h3><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/** 错误实例 */</span>
<span class="token selector">.appContainer</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #FFFFFF<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/** 正确实例 */</span>
<span class="token selector">.app-container</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #FFFFFF<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用sass-时-选择器需层次分明" tabindex="-1"><a class="header-anchor" href="#_3-使用sass-时-选择器需层次分明"><span>3. 使用Sass 时, 选择器需层次分明</span></a></h3><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Html 部分 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* 错误实例 选择器全部平铺开来 */</span>
<span class="token selector">.app-container</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #FFFFFF<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.title</span> <span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/* 正确实例 选择器层次分明 */</span>
<span class="token selector">.app-container</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #FFFFFF<span class="token punctuation">;</span>

    <span class="token selector">.title</span> <span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-组件样式统一使用scoped局部样式编写-穿透样式使用-deep-深度选择器" tabindex="-1"><a class="header-anchor" href="#_4-组件样式统一使用scoped局部样式编写-穿透样式使用-deep-深度选择器"><span>4. 组件样式统一使用<code>scoped</code>局部样式编写，穿透样式使用<code>:deep()</code>深度选择器</span></a></h3><h3 id="_5-禁止使用无意义命名-比如-abc-a1-a2" tabindex="-1"><a class="header-anchor" href="#_5-禁止使用无意义命名-比如-abc-a1-a2"><span>5. 禁止使用无意义命名，比如：<code>abc</code>，<code>a1</code>，<code>a2</code></span></a></h3><h2 id="二-javascript-部分" tabindex="-1"><a class="header-anchor" href="#二-javascript-部分"><span>二. Javascript 部分</span></a></h2><h3 id="_1-定义常量变量采用es6命名规范-禁止使用var" tabindex="-1"><a class="header-anchor" href="#_1-定义常量变量采用es6命名规范-禁止使用var"><span>1. 定义常量变量采用ES6命名规范, 禁止使用var</span></a></h3><h3 id="_2-常量-变量命名统一采用驼峰法命名-第一个单词之外-其他单词首字母大写" tabindex="-1"><a class="header-anchor" href="#_2-常量-变量命名统一采用驼峰法命名-第一个单词之外-其他单词首字母大写"><span>2. 常量 / 变量命名统一采用驼峰法命名（第一个单词之外,其他单词首字母大写）</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 错误实例</span>
<span class="token keyword">const</span> TestNum1 <span class="token operator">=</span> <span class="token number">123</span>
<span class="token keyword">let</span> TestNum2 <span class="token operator">=</span> <span class="token number">123</span>

<span class="token comment">// 正确实例</span>
<span class="token keyword">const</span> testNum1 <span class="token operator">=</span> <span class="token number">123</span>
<span class="token keyword">let</span> testNum2 <span class="token operator">=</span> <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-函数命名统一采用驼峰法命名" tabindex="-1"><a class="header-anchor" href="#_3-函数命名统一采用驼峰法命名"><span>3. 函数命名统一采用驼峰法命名</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 错误实例</span>
<span class="token keyword">function</span> <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;这是测试方法&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确实例</span>
<span class="token keyword">function</span> <span class="token function">testFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;这是测试方法&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-模块引入名采用大驼峰法命名" tabindex="-1"><a class="header-anchor" href="#_4-模块引入名采用大驼峰法命名"><span>4. 模块引入名采用大驼峰法命名</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 错误实例</span>
<span class="token keyword">import</span> testDemo <span class="token keyword">from</span> <span class="token string">&#39;testModule&#39;</span>

<span class="token comment">// 正确实例</span>
<span class="token keyword">import</span> TestModule <span class="token keyword">from</span> <span class="token string">&#39;testModule&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-常量-变量-函数-命名具象化-禁止非常规缩写与随意命名" tabindex="-1"><a class="header-anchor" href="#_5-常量-变量-函数-命名具象化-禁止非常规缩写与随意命名"><span>5. 常量 / 变量 / 函数 命名具象化，禁止非常规缩写与随意命名</span></a></h3><p>变量实例:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 这里需要用户信息, 却用了info命名</span>
<span class="token comment">// 错误实例</span>
<span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span>
    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确实例 命名应该贴切使用场景</span>
<span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span>
    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数实例：根据【错误实例】名称无法解读当前函数的作用, 根据【正确实例】的函数名称可以看出此方法是一个处理input变化时的函数。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 这里需要一个对表单的input变动进行监测的函数</span>
<span class="token comment">// 错误实例</span>
<span class="token keyword">function</span> input <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;数据变动了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确实例</span>
<span class="token keyword">function</span> handleInputChange <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;数据变动了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-常量-变量-函数-的命名技巧" tabindex="-1"><a class="header-anchor" href="#_6-常量-变量-函数-的命名技巧"><span>6. 常量 / 变量 / 函数 的命名技巧</span></a></h3><p>handle Input Change =&gt; handleInputChange</p><ol><li>动词 表达要做的动作，如：处理, 获取, 提交, 设置等</li><li>名词 做动作的对象, 要针对xx做动作, 如: 用户, 产品, 物件等</li><li>动词 做什么事 如: 新增, 编辑, 删除</li></ol><h2 id="三-vue-业务-部分" tabindex="-1"><a class="header-anchor" href="#三-vue-业务-部分"><span>三. Vue / 业务 部分</span></a></h2><h3 id="_1-页面与组件的命名" tabindex="-1"><a class="header-anchor" href="#_1-页面与组件的命名"><span>1. 页面与组件的命名</span></a></h3><ul><li>页面命名必须以驼峰法命名</li><li>页面名称必须与网址路径名称一致</li><li>组件命名必须以大驼峰法命名</li><li>页面嵌套组件一般用Unit开头命名</li></ul><h3 id="_2-所有延迟场景必须有loading过渡效果" tabindex="-1"><a class="header-anchor" href="#_2-所有延迟场景必须有loading过渡效果"><span>2. 所有延迟场景必须有loading过渡效果</span></a></h3><p>不允许出现如下场景:</p><ul><li>点击按钮后正在进行http请求, 而页面无任何反应</li><li>首次进入页面，页面正在进行异步加载时, 无任何反应</li><li>正在进行代码上的异步操作，没有给予界面反馈，让界面处于无任何反应状态</li></ul><h3 id="_3-所有http异步请求在可用async-await方式时-必须采用" tabindex="-1"><a class="header-anchor" href="#_3-所有http异步请求在可用async-await方式时-必须采用"><span>3. 所有HTTP异步请求在可用async await方式时，必须采用</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 实例， 调用必须采用try catch模式：</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token keyword">await</span> <span class="token function">testDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 需要调用的请求</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// 错误时需要处理的事件</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">// 请求完毕时需要处理的事件</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token comment">// 当函数不是在顶层是，可无需try catch, 错误信息会自动向上层抛出</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">=</span> data
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-消息的通知与提醒" tabindex="-1"><a class="header-anchor" href="#_4-消息的通知与提醒"><span>4. 消息的通知与提醒</span></a></h3><ul><li>项目中所有操作【通知】必须产生<code>$notify</code>反馈, 如: <ul><li>新增成功</li><li>编辑成功</li><li>删除成功</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;消息&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;新增成功&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>项目中所有操作【提醒】必须产生<code>$message</code>反馈, 如: <ul><li>请上传合法的文件</li><li>上传文件大小不能超过2M</li><li>只能上传JPG/PNG/GIF格式图片</li><li>this.$message.warning(<code>请上传合法的文件</code>)</li></ul></li></ul><h3 id="_5-客户端控制台需保持整洁" tabindex="-1"><a class="header-anchor" href="#_5-客户端控制台需保持整洁"><span>5. 客户端控制台需保持整洁</span></a></h3><p>正式项目中，不允许控制台无故出现<code>console.log</code>等字样</p><h3 id="_6-代码冗余问题" tabindex="-1"><a class="header-anchor" href="#_6-代码冗余问题"><span>6. 代码冗余问题</span></a></h3><ul><li>超过两处可以一模一样的函数方法且函数实现复杂时，需抽离并封装成公用方法统一维护</li><li>不允许出现意外的变量控制。如:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> loading <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">const</span> <span class="token function-variable function">testFun1</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        loading <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token keyword">await</span> <span class="token function">testFun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;await:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        loading <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">testFun2</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    loading <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">await</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    loading <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的错误例子是: 在同一逻辑场景，loading出现了反复赋值</p><h3 id="_7-滥用wacth导致额外的内存开销" tabindex="-1"><a class="header-anchor" href="#_7-滥用wacth导致额外的内存开销"><span>7. 滥用wacth导致额外的内存开销</span></a></h3><p>在无需watch进行变量或者对象监听的情况下，不允许用watch进行监听。如： 弹窗组件：打开事件，关闭事件，所有处理应该在这两个事件完成。而不是监听传入的属性进行业务操作。</p><h3 id="_8-在vue中template模板中禁止出现复杂的代码" tabindex="-1"><a class="header-anchor" href="#_8-在vue中template模板中禁止出现复杂的代码"><span>8. 在<code>vue</code>中<code>template</code>模板中禁止出现复杂的代码</span></a></h3><ul><li>禁止在模板中直接编写函数</li><li>禁止在模板中出现复杂的逻辑表达式</li></ul><ol start="9"><li><code>v-for</code>和<code>v-if</code>禁止在同一标签节点上使用，<code>v-for</code>必须指定<code>key</code></li></ol><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 错误案例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.show<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    xxx
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 正确案例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-关于页面布局和element-ui-的常用规范" tabindex="-1"><a class="header-anchor" href="#_10-关于页面布局和element-ui-的常用规范"><span>10. 关于页面布局和Element Ui 的常用规范</span></a></h3><ul><li><p>当有需要表达【状态】的业务场景时需用到<code>el-tag</code>组件。根据<code>type</code>表达各种业务场景, 如表达设备状态时：</p><ul><li>默认不传入 在线状态</li><li>success 成功连接状态</li><li>info 离线状态</li><li>warning 异常状态</li><li>danger 错误状态 / 离线状态</li></ul></li><li><p>按钮通常采用<code>el-button</code> 组件。</p></li></ul><h3 id="_11-关于npm-pnpm的包管理" tabindex="-1"><a class="header-anchor" href="#_11-关于npm-pnpm的包管理"><span>11. 关于<code>npm</code>/<code>pnpm</code>的包管理</span></a></h3><p>禁止项目中安装用不到的插件。</p><h2 id="四-其他" tabindex="-1"><a class="header-anchor" href="#四-其他"><span>四. 其他</span></a></h2><h3 id="_1-移动端" tabindex="-1"><a class="header-anchor" href="#_1-移动端"><span>1. 移动端</span></a></h3><ul><li><p>移动端开发根据宽度<code>750px</code>进行开发</p></li><li><p>所有用到的jpg/png图片采用750比例切图(蓝湖尺寸<code>750px</code>时下载一倍切图，蓝湖尺寸<code>375px</code>时下载二倍切图)</p></li></ul><h3 id="_2-小程序端" tabindex="-1"><a class="header-anchor" href="#_2-小程序端"><span>2. 小程序端</span></a></h3><ul><li><p>小程序 1, 2条同移动端</p></li><li><p>小程序<code>px</code>采用<code>rpx</code></p></li><li><p>字体一般采用<code>px</code></p></li><li><p>线条最小<code>1px</code>时不需要采用<code>1rpx</code></p></li></ul>`,59),p=[l];function i(c,o){return s(),a("div",null,p)}const d=n(t,[["render",i],["__file","语法规范.html.vue"]]),r=JSON.parse('{"path":"/engineering/standard/%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一. Html / Css 部分","slug":"一-html-css-部分","link":"#一-html-css-部分","children":[{"level":3,"title":"1. Html元素命名统一采用串式命名法","slug":"_1-html元素命名统一采用串式命名法","link":"#_1-html元素命名统一采用串式命名法","children":[]},{"level":3,"title":"2. Css元素命名统一采用串式命名法","slug":"_2-css元素命名统一采用串式命名法","link":"#_2-css元素命名统一采用串式命名法","children":[]},{"level":3,"title":"3. 使用Sass 时, 选择器需层次分明","slug":"_3-使用sass-时-选择器需层次分明","link":"#_3-使用sass-时-选择器需层次分明","children":[]},{"level":3,"title":"4. 组件样式统一使用scoped局部样式编写，穿透样式使用:deep()深度选择器","slug":"_4-组件样式统一使用scoped局部样式编写-穿透样式使用-deep-深度选择器","link":"#_4-组件样式统一使用scoped局部样式编写-穿透样式使用-deep-深度选择器","children":[]},{"level":3,"title":"5. 禁止使用无意义命名，比如：abc，a1，a2","slug":"_5-禁止使用无意义命名-比如-abc-a1-a2","link":"#_5-禁止使用无意义命名-比如-abc-a1-a2","children":[]}]},{"level":2,"title":"二. Javascript 部分","slug":"二-javascript-部分","link":"#二-javascript-部分","children":[{"level":3,"title":"1. 定义常量变量采用ES6命名规范, 禁止使用var","slug":"_1-定义常量变量采用es6命名规范-禁止使用var","link":"#_1-定义常量变量采用es6命名规范-禁止使用var","children":[]},{"level":3,"title":"2. 常量 / 变量命名统一采用驼峰法命名（第一个单词之外,其他单词首字母大写）","slug":"_2-常量-变量命名统一采用驼峰法命名-第一个单词之外-其他单词首字母大写","link":"#_2-常量-变量命名统一采用驼峰法命名-第一个单词之外-其他单词首字母大写","children":[]},{"level":3,"title":"3. 函数命名统一采用驼峰法命名","slug":"_3-函数命名统一采用驼峰法命名","link":"#_3-函数命名统一采用驼峰法命名","children":[]},{"level":3,"title":"4. 模块引入名采用大驼峰法命名","slug":"_4-模块引入名采用大驼峰法命名","link":"#_4-模块引入名采用大驼峰法命名","children":[]},{"level":3,"title":"5. 常量 / 变量 / 函数 命名具象化，禁止非常规缩写与随意命名","slug":"_5-常量-变量-函数-命名具象化-禁止非常规缩写与随意命名","link":"#_5-常量-变量-函数-命名具象化-禁止非常规缩写与随意命名","children":[]},{"level":3,"title":"6. 常量 / 变量 / 函数 的命名技巧","slug":"_6-常量-变量-函数-的命名技巧","link":"#_6-常量-变量-函数-的命名技巧","children":[]}]},{"level":2,"title":"三. Vue / 业务 部分","slug":"三-vue-业务-部分","link":"#三-vue-业务-部分","children":[{"level":3,"title":"1. 页面与组件的命名","slug":"_1-页面与组件的命名","link":"#_1-页面与组件的命名","children":[]},{"level":3,"title":"2. 所有延迟场景必须有loading过渡效果","slug":"_2-所有延迟场景必须有loading过渡效果","link":"#_2-所有延迟场景必须有loading过渡效果","children":[]},{"level":3,"title":"3. 所有HTTP异步请求在可用async await方式时，必须采用","slug":"_3-所有http异步请求在可用async-await方式时-必须采用","link":"#_3-所有http异步请求在可用async-await方式时-必须采用","children":[]},{"level":3,"title":"4. 消息的通知与提醒","slug":"_4-消息的通知与提醒","link":"#_4-消息的通知与提醒","children":[]},{"level":3,"title":"5. 客户端控制台需保持整洁","slug":"_5-客户端控制台需保持整洁","link":"#_5-客户端控制台需保持整洁","children":[]},{"level":3,"title":"6. 代码冗余问题","slug":"_6-代码冗余问题","link":"#_6-代码冗余问题","children":[]},{"level":3,"title":"7. 滥用wacth导致额外的内存开销","slug":"_7-滥用wacth导致额外的内存开销","link":"#_7-滥用wacth导致额外的内存开销","children":[]},{"level":3,"title":"8. 在vue中template模板中禁止出现复杂的代码","slug":"_8-在vue中template模板中禁止出现复杂的代码","link":"#_8-在vue中template模板中禁止出现复杂的代码","children":[]},{"level":3,"title":"10. 关于页面布局和Element Ui 的常用规范","slug":"_10-关于页面布局和element-ui-的常用规范","link":"#_10-关于页面布局和element-ui-的常用规范","children":[]},{"level":3,"title":"11. 关于npm/pnpm的包管理","slug":"_11-关于npm-pnpm的包管理","link":"#_11-关于npm-pnpm的包管理","children":[]}]},{"level":2,"title":"四. 其他","slug":"四-其他","link":"#四-其他","children":[{"level":3,"title":"1. 移动端","slug":"_1-移动端","link":"#_1-移动端","children":[]},{"level":3,"title":"2. 小程序端","slug":"_2-小程序端","link":"#_2-小程序端","children":[]}]}],"git":{"updatedTime":1712455531000,"contributors":[{"name":"zqy","email":"1324980809@qq.com","commits":1}]},"filePathRelative":"engineering/standard/语法规范.md"}');export{d as comp,r as data};
