import{_ as e,r as o,o as c,c as l,a as n,b as s,d as p,e as a}from"./app-e94K_zRz.js";const i="/richard_blog/assets/WX20240410-144347-uLqLY9f1.png",u="/richard_blog/assets/WX20240412-172646-BIEy5IlK.png",r="/richard_blog/assets/WX20240410-202105-Ch_60RIH.png",d={},k=a(`<h2 id="一、数据类型" tabindex="-1"><a class="header-anchor" href="#一、数据类型"><span>一、数据类型</span></a></h2><h3 id="javascript-有哪些数据类型-区别" tabindex="-1"><a class="header-anchor" href="#javascript-有哪些数据类型-区别"><span>JavaScript 有哪些数据类型，区别</span></a></h3><p>JavaScript 中有 8 种数据类型，按照存储位置的不同分为两类：基本数据类型和引用数据类型。</p><ul><li><p>基本数据类型：包括<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>和 <code>Symbol</code>（ES6 新增)、<code>BigInt</code>（ES6 新增)</p><ul><li>字符串：表示文本数据，使用单引号（&#39;）或双引号（&quot;）表示。</li><li>数字：表示数值数据，包括整数和浮点数。</li><li>布尔值：表示逻辑上的真或假，只有两个取值：true 和 false。</li><li>空（Null）：表示一个空对象指针，意味着该变量不指向任何有效的对象。</li><li>未定义（Undefined）：表示未初始化的变量或不存在的属性。</li><li>Symbol：表示唯一的标识符，是 ES6 新增的数据类型，主要用于对象属性名的定义。</li><li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li></ul></li><li><p>引用类型：包括<code>Object</code>、<code>Array</code>、<code>Function</code></p><ul><li>对象：表示一组相关的数据和功能，可以包含多个属性和方法。</li><li>数组：表示一组有序的数据，可以包含任意类型的数据，使用方括号（[ ]）表示。</li><li>函数：表示一段可重复调用的代码块，使用 function 关键字定义，可以包含多个参数和代码块。</li></ul></li></ul><p>两种类型的区别在于<strong>存储位置的不同：</strong></p><ul><li>基本数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li><li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中的内存地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li></ul><p>堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</p><ul><li>在数据结构中，栈中数据的存取方式为先进后出。</li><li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li></ul><p>在操作系统中，内存被分为栈区和堆区：</p><ul><li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li><li>堆区内存一般由开发者分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li></ul><h3 id="数据类型检测的方式有哪些" tabindex="-1"><a class="header-anchor" href="#数据类型检测的方式有哪些"><span>数据类型检测的方式有哪些</span></a></h3><p><strong>（1）typeof</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span> <span class="token comment">// string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// function</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中数组、对象、null 都会被判断为 <code>object</code>，其他判断都正确。可以用于判断<code>基本数据类型</code>和<code>function</code></p><p><strong>（2）instanceof</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token comment">// 不能判断undefind和null 会报错</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>instanceof</code><strong>只能正确判断引用数据类型</strong>，而不能判断基本数据类型。<code>instanceof</code> 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 <code>prototype</code> 属性。</p><p><strong>（3） constructor</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token comment">// 判断 \`null\` 和 \`undefined\` 会直接报错。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>constructor</code>有两个作用，一是判断数据的类型，二是对象实例通过 <code>constructor</code> 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型了：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 改变原型</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Fn<span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）Object.prototype.toString.call()</strong></p><p><code>Object.prototype.toString.call()</code> 使用 Object 对象的原型方法 toString 来判断数据类型：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt="img"></p><p>稳健地判断 JavaScript 数据类型方式，可以符合预期的判断基本数据类型 String、Undefined 等，也可以判断 Array、Object 这些引用数据类型</p><p><code>思考</code></p><p>同样是检测对象 obj 调用 toString 方法，obj.toString()的结果和 Object.prototype.toString.call(obj)的结果不一样，这是为什么？</p><p>这是因为 toString 是 Object 的原型方法，而 Array、function 等<strong>类型作为 Object 的实例，都重写了 toString 方法</strong>。不同的对象类型调用 toString 方法时，根据原型链的知识，调用的是对应的重写之后的 toString 方法（function 类型返回内容为函数体的字符串，Array 类型返回元素组成的字符串…），而不会去调用 Object 上原型 toString 方法（返回对象的具体类型），所以采用 obj.toString()不能得到其对象类型，只能将 obj 转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用 Object 原型上的 toString 方法。</p><h3 id="判断数组数据类型的方法" tabindex="-1"><a class="header-anchor" href="#判断数组数据类型的方法"><span>判断数组数据类型的方法</span></a></h3><p><code>根据构造函数判断（妈妈）</code></p><ul><li><strong>instanceof</strong></li></ul><p>判断一个实例是否属于某构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点：</strong> instanceof 底层原理是检测构造函数的 prototype 属性是否出现在某个实例的原型链上，如果实例的原型链发生变化，则无法做出正确判断。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function-variable function">__proto__</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 改变原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>constructor</strong></li></ul><p>实例的构造函数属性 constructor 指向构造函数本身。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点：</strong> 如果 arr 的 constructor 被修改，则无法做出正确判断。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function-variable function">constructor</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>根据原型对象判断（爸爸）</code></p><ul><li><strong>proto</strong></li></ul><p>实例的 <code>__proto__</code> 指向构造函数的原型对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点：</strong>   如果实例的原型链的被修改，则无法做出正确判断。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function-variable function">__proto__</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Object.getPrototypeOf()</strong></li></ul><p>Object 自带的方法，获取某个对象所属的原型对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点：</strong>   同上</p><ul><li><strong>Array.prototype.isPrototypeOf()</strong></li></ul><p>Array 原型对象的方法，方法用于检查一个对象是否存在于另一个对象的原型链中</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点：</strong>   同上</p><p><code>根据 Object 的原型对象判断（祖先）</code></p><ul><li><strong>Object.prototype.toString.call()</strong></li></ul><p>Object 的原型对象上有一个 toString 方法，toString 方法默认被所有对象继承，返回 &quot;<code>[object type]</code>&quot; 字符串。但此方法经常被原型链上的同名方法覆盖，需要通过 Object.prototype.toString.call() 强行调用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类型就像胎记，一出生就刻在了身上，因此修改原型链不会对它造成任何影响。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function-variable function">__proto__</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Array]&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Array.isArray()</strong></li></ul><p>ES6 新增的方法，专门用于数组类型判断，原理同上。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改原型链不会对它造成任何影响。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function-variable function">__proto__</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong></p><p>以上就是判断是否为数组的常用方法，相信不用说大家也看出来 <strong>Array.isArray</strong> 最好用、最靠谱了吧，还是 ES6 香！</p><h3 id="null-和-undefined-区别" tabindex="-1"><a class="header-anchor" href="#null-和-undefined-区别"><span>null 和 undefined 区别</span></a></h3><ul><li>都是基本数据类型，分别都只有一个值，<code>undefined</code> 和 <code>null</code></li><li>变量被声明了，但没有赋值时，就等于<code>undefined</code></li><li><code>null</code> : 一个空对象, 没有任何属性和方法，主要用于赋值给一些可能会返回对象的变量，作为初始化</li><li>使用 typeof 进行判断时，null 会返回 <code>&#39;Object&#39;</code>，这是一个历史遗留的问题。</li><li>在验证<code>null</code>时，一定要使用　<code>===</code> ，因为 <code>null == undefined</code>会判断成<code>true</code></li><li><code>null</code>转换数值为 0，<code>undefinded</code>转换数值为 NAN</li></ul><p>其实 null 不是对象，虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来</p><h3 id="typeof-null-为什么是object" tabindex="-1"><a class="header-anchor" href="#typeof-null-为什么是object"><span>typeof null 为什么是Object</span></a></h3><p>这是由于历史遗留原因造成的。在 JavaScript 的早期版本中，为了表示空对象引用，使用了一个特殊的值 null。null 被认为是一个空对象指针，用于表示变量没有引用任何对象。这个结果的产生是因为在 JavaScript 的底层实现中，变量的类型信息存储在一个称为标记（tag）的位上。对于对象，标记位的值是 000，而对于 null 值，标记位的值也是 000，与对象相同。因此，当 typeof 运算符检测到标记位为 000 时，会返回 &quot;object&quot;。</p><p>所有值都存储在 32 位的单元中，js 在底层存储变量的时候，会在变量的机器码的低位 1-3 位存储其类型信息。共有五种数据类型：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">000</span><span class="token operator">:</span> object   <span class="token operator">-</span> 当前存储的数据指向一个对象。
  <span class="token number">1</span><span class="token operator">:</span> 整数      <span class="token operator">-</span> 当前存储的数据是一个 <span class="token number">31</span> 位的有符号整数。
<span class="token number">010</span><span class="token operator">:</span> 浮点数   <span class="token operator">-</span> 当前存储的数据指向一个双精度的浮点数。
<span class="token number">100</span><span class="token operator">:</span> string   <span class="token operator">-</span> 当前存储的数据指向一个字符串。
<span class="token number">110</span><span class="token operator">:</span> boolean  <span class="token operator">-</span> 当前存储的数据是布尔值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="intanceof-操作符的实现原理" tabindex="-1"><a class="header-anchor" href="#intanceof-操作符的实现原理"><span>intanceof 操作符的实现原理</span></a></h3><p>instanceof 运算符用于判断构造函数的 prototype属性是否出现在实例的原型链中</p><ul><li>首先获取被判断的实例的原型</li><li>然后获得构造函数的原型</li><li>通过循环判断实例的原型是否等于构造函数的原型，直到原型的原型为 null，因为原型链最终为 null</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myInstanceof</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取对象的原型</span>
  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>
  <span class="token comment">// 获取构造函数的 prototype 对象</span>
  <span class="token keyword">let</span> prototype <span class="token operator">=</span> right<span class="token punctuation">.</span>prototype

  <span class="token comment">// 判断构造函数的 prototype 对象是否在对象的原型链上</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proto<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token comment">// 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型</span>
    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string-有哪些原生方法" tabindex="-1"><a class="header-anchor" href="#string-有哪些原生方法"><span>string 有哪些原生方法？</span></a></h3><ul><li>trim（),toUppercase(), tolowercase() split（）</li><li>slice(start,end) end 不包括</li><li>substring（start，end）end 不包括</li><li>substr（start，length）</li><li>replce（old，new）</li></ul><h3 id="数组有哪些原生方法" tabindex="-1"><a class="header-anchor" href="#数组有哪些原生方法"><span>数组有哪些原生方法？</span></a></h3><ul><li>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。</li><li>数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。</li><li>数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li><li>数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</li><li>数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。</li><li>数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf()</li><li>迭代方法 every()、some()、filter()、map() 和 forEach() 方法</li><li>数组归并方法 reduce() 和 reduceRight() 方法</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>- slice（）全部截取出来返回一个新数组
- slice（start）截取从start开始到最后
- slice（start，end）从start开始到end（不包括end）
- splice（start，deletecount删除个数）
- splice（start，delecount，items添加的元素）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="为什么-0-1-0-2-0-3-如何让其相等" tabindex="-1"><a class="header-anchor" href="#为什么-0-1-0-2-0-3-如何让其相等"><span>为什么 0.1+0.2 !== 0.3，如何让其相等</span></a></h3><p>在开发过程中遇到类似这样的问题：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">,</span>
  n2 <span class="token operator">=</span> <span class="token number">0.2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span> <span class="token comment">// 0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里得到的不是想要的结果，要想等于 0.3，就要把它进行转化：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 注意，toFixed为四舍五入</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>原因</strong></p><p>计算机是通过二进制的方式存储数据的，所以计算机计算 0.1+0.2 的时候，实际上是计算的两个数的二进制的和。0.1 的二进制是<code>0.0001100110011001100...</code>（1100 循环），0.2 的二进制是：<code>0.00110011001100...</code>（1100 循环），这两个数的二进制都是无限循环的数。那 JavaScript 是如何处理无限循环的二进制小数呢？</p><p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循 IEEE 754 标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留 52 位，再加上前面的 1，其实就是保留 53 位有效数字，剩余的需要舍去，遵从“0 舍 1 入”的原则。</p><p>根据这个原则，0.1 和 0.2 的二进制数相加，再转化为十进制数就是：<code>0.30000000000000004</code>。</p><p><strong>如何实现 0.1+0.2=0.3 呢</strong></p><ul><li>可以将浮点数转换为整数，进行精确计算，然后再将结果转回浮点数。</li><li>另外，也可以使用一些 JavaScript 库，如 decimal.js 和 big.js 来进行高精度计算。</li><li>对 JavaScript 来说，这个值通常为 2-52，在 ES6 中，提供了<code>Number.EPSILON</code>属性，而它的值就是 2-52，只要判断<code>0.1+0.2-0.3</code>是否小于<code>Number.EPSILON</code>，如果小于，就可以判断为 0.1+0.2 ===0.3</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">numberepsilon</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>arg1 <span class="token operator">-</span> arg2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">numberepsilon</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typeof-nan-的结果是什么" tabindex="-1"><a class="header-anchor" href="#typeof-nan-的结果是什么"><span>typeof NaN 的结果是什么？</span></a></h3><p>NaN 指<code>不是一个数字</code>（not a number），NaN 是一个<code>警戒值</code>，用于指出数字类型中的错误情况，即执行数学运算没有成功，这是失败后返回的结果。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token number">NaN</span> <span class="token comment">// &quot;number&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，即 <code>x === x</code> 不成立）的值。而 <code>NaN !== NaN</code> 为 true。</p><h3 id="isnan-和-number-isnan-函数的区别" tabindex="-1"><a class="header-anchor" href="#isnan-和-number-isnan-函数的区别"><span>isNaN 和 Number.isNaN 函数的区别</span></a></h3><p>都是 JavaScript 中用于检查一个值是否为 NaN 的函数</p><ul><li><code>isNaN</code> 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Number.isNaN()</code>函数是在 ES6 中引入的，首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: tru</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="js-的数据类型的转换" tabindex="-1"><a class="header-anchor" href="#js-的数据类型的转换"><span>js 的数据类型的转换</span></a></h3><p>在 JS 中类型转换只有三种情况，分别是：</p><ul><li>转换为布尔值（调用 <code>Boolean()方法</code>）</li><li>转换为数字（调用 <code>Number()</code>、<code>parseInt()</code>和 <code>parseFloat()</code>方法和<code>正则+,-</code>）</li><li>转换为字符串（调用<code>toString()</code>或者 <code>String()</code>方法或者<code>拼接</code>）</li></ul><h3 id="object-is-与-与-的区别" tabindex="-1"><a class="header-anchor" href="#object-is-与-与-的区别"><span>Object.is() 与 <code>===</code>与<code>==</code> 的区别</span></a></h3><ul><li>使用<code>==</code>进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</li><li>使用<code>===</code>进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</li><li>使用 <code>Object.is(value1, value2)</code>来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的</li></ul><h3 id="比较运算符的会隐式转换" tabindex="-1"><a class="header-anchor" href="#比较运算符的会隐式转换"><span>==比较运算符的会隐式转换</span></a></h3><p>当使用双等号（==）比较两个值时，如果这两个值的类型不同，JavaScript会尝试将它们转换成同一类型后再进行比较。这种转换被称为隐式类型转换</p><p><strong>转换规则：</strong></p><ul><li>如果其中一个值是<code>Boolean</code>类型，另一个是非布尔值，那么它会被转换成<code>Number</code>类型。<code>false</code>会被转换成0，true会被转换成1。</li><li>如果其中一个值是<code>String</code>类型，另一个是<code>Number</code>类型，那么它会被转换成<code>Number</code>类型。如果字符串能够被解析成数值，则会被转换成相应的数值；否则会被转换成NaN</li><li>如果其中一个为<code>object</code>且另一个为 <code>string</code>或者<code>number</code>，则将对象通过 valueOf() 或 toString() 方法转换为相应的原始值</li><li>如果一个值是 <code>null</code> 或 <code>undefined</code>，它们可以互相等同</li><li>如果 == 两边都是对象比引用地址</li><li>NAN 不等于任何，包括自己</li></ul><h3 id="其他值到字符串的转换规则" tabindex="-1"><a class="header-anchor" href="#其他值到字符串的转换规则"><span>其他值到字符串的转换规则？</span></a></h3><ul><li>Null 和 Undefined 类型 ，null 转换为 &quot;null&quot;，undefined 转换为 &quot;undefined&quot;，</li><li>Boolean 类型，true 转换为 &quot;true&quot;，false 转换为 &quot;false&quot;。</li><li>Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。</li><li>Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</li><li>对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如&quot;[object Object]&quot;。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。</li></ul><h3 id="其他值到数字值的转换规则" tabindex="-1"><a class="header-anchor" href="#其他值到数字值的转换规则"><span>其他值到数字值的转换规则？</span></a></h3><ul><li><code>Undefined</code> 类型的值转换为 <code>NaN</code></li><li><code>Null</code> 类型的值转换为 <code>0</code></li><li><code>Boolean</code> 类型的值，<code>true 转换为 1</code>，<code>false 转换为 0</code></li><li><code>String</code> 类型的值转换如同使用 <code>Number()</code> 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</li><li><code>Symbol</code> 类型的值不能转换为数字，会报错。</li><li><code>对象（包括数组</code>）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字</li></ul><h3 id="其他值到布尔类型的值的转换规则" tabindex="-1"><a class="header-anchor" href="#其他值到布尔类型的值的转换规则"><span>其他值到布尔类型的值的转换规则？</span></a></h3><p>以下这些是假值：</p><ul><li><code>undefined</code></li><li><code>null</code></li><li><code>false</code></li><li><code>+0、-0 和 NaN</code></li><li><code>空字符串&quot;&quot;</code></li></ul><p>假值的布尔强制类型转换结果为 false，从逻辑上说，假值列表以外的都应该是真值。</p><h3 id="和-和-运算符分别能做什么" tabindex="-1"><a class="header-anchor" href="#和-和-运算符分别能做什么"><span>&amp;&amp; 和 || 和 ! 运算符分别能做什么</span></a></h3><ul><li><code>&amp;&amp;</code> 叫逻辑与，在其操作数中找到第一个虚值表达式并返回它，如果没有找到任何虚值表达式，则返回最后一个真值表达式。它采用短路来防止不必要的工作。</li><li><code>||</code> 叫逻辑或，在其操作数中找到第一个真值表达式并返回它。这也使用了短路来防止不必要的工作。在支持 ES6 默认函数参数之前，它用于初始化函数中的默认参数值。</li><li><code>!</code> 运算符可以将右侧的值强制转换为布尔值，这也是将值转换为布尔值的一种简单方法。</li></ul><h3 id="什么是-javascript-中的包装类型" tabindex="-1"><a class="header-anchor" href="#什么是-javascript-中的包装类型"><span>什么是 JavaScript 中的包装类型？</span></a></h3><p>在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
a<span class="token punctuation">.</span>length <span class="token comment">// 3</span>
a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;ABC&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在访问<code>&#39;abc&#39;.length</code>时，JavaScript 将<code>&#39;abc&#39;</code>在后台转换成<code>String(&#39;abc&#39;)</code>，然后再访问其<code>length</code>属性。</p><p>JavaScript 也可以使用<code>Object</code>函数显式地将基本类型转换为包装类型：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
<span class="token function">Object</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// String {&quot;abc&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用<code>valueOf</code>方法将包装类型倒转成基本类型：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;abc&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看如下代码会打印出什么：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Oops&#39;</span><span class="token punctuation">)</span> <span class="token comment">// never runs</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是什么都不会打印，因为虽然包裹的基本类型是<code>false</code>，但是<code>false</code>被包裹成包装类型后就成了对象，所以其非值为<code>false</code>，所以循环体中的内容不会运行。</p><h3 id="为什么会有bigint的提案" tabindex="-1"><a class="header-anchor" href="#为什么会有bigint的提案"><span>为什么会有BigInt的提案？</span></a></h3><p>JavaScript 中 Number.MAX_SAFE_INTEGER 表示最⼤安全数字，计算结果是 9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js 就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了 BigInt 来解决此问题。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 BigInt 构造函数创建 BigInt</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">20n</span><span class="token punctuation">;</span> <span class="token comment">// 使用后缀 n 创建 BigInt</span>

<span class="token keyword">const</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// BigInt 之间的加法运算</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 30n</span>

<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BigInt 转换为 Number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span>

<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BigInt 转换为 String</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;20&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、javascript-基础" tabindex="-1"><a class="header-anchor" href="#二、javascript-基础"><span>二、JavaScript 基础</span></a></h2><h3 id="常见的输出语句" tabindex="-1"><a class="header-anchor" href="#常见的输出语句"><span>常见的输出语句</span></a></h3><ul><li>aleart</li><li>confirm 确认弹框</li><li>prompt 文本输入框</li><li>document.write 在页面写一段内容 慎用</li><li>console.log</li></ul><h3 id="声明变量的几种方式" tabindex="-1"><a class="header-anchor" href="#声明变量的几种方式"><span>声明变量的几种方式</span></a></h3><ul><li>声明变量同时赋值</li><li>先声明后赋值</li><li>同时声明多个变量</li><li>不声明直接赋值</li><li>不声明不赋值，直接使用（会报错）</li></ul><h3 id="js-命名规则" tabindex="-1"><a class="header-anchor" href="#js-命名规则"><span>js 命名规则</span></a></h3><ul><li>使用数字、下划线、字母、$组成</li><li>不能使用数字开头</li><li>不能使用中横线</li><li>严格区分大小写</li><li>不能使用关键字和保留字</li></ul><h3 id="创建元素的方式" tabindex="-1"><a class="header-anchor" href="#创建元素的方式"><span>创建元素的方式</span></a></h3><ul><li><code>innerHtml()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.container&#39;</span><span class="token punctuation">)</span>
container<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&lt;div&gt;22&lt;/div&gt;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>document.createElement()</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用 appendChild() 方法、insertBefore() 方法或</span>
<span class="token comment">// 其他操作 DOM 的方法将元素节点添加到文档中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>document.write()</code>方法直接写入HTML标签和内容。这种方法简单，但是如果在页面加载完毕后使用，会覆盖原有的内容。</li></ul><h3 id="介绍-js-有哪些内置对象" tabindex="-1"><a class="header-anchor" href="#介绍-js-有哪些内置对象"><span>介绍 js 有哪些内置对象？</span></a></h3><p>js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般我们经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() ,用来实例化对象的构造函数如 Date、Object、Number、date、String 等，还有提供数学计算的单体内置对象如 Math 对象。</p><p>标准内置对象的分类</p><p>（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。</p><p>例如 Infinity、NaN、undefined、null 字面量</p><p>（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。</p><p>例如 eval()、parseFloat()、parseInt() 等</p><p>（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。</p><p>例如 Object、Function、Boolean、Symbol、Error 等</p><p>（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。</p><p>例如 Number、Math、Date</p><p>（5）字符串，用来表示和操作字符串的对象。</p><p>例如 String、RegExp</p><p>（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array</p><p>（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。</p><p>例如 Map、Set、WeakMap、WeakSet</p><p>（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。</p><p>例如 SIMD 等</p><p>（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。</p><p>例如 JSON 等</p><p>（10）控制抽象对象</p><p>例如 Promise、Generator 等</p><p>（11）反射</p><p>例如 Reflect、Proxy</p><p>（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。</p><p>例如 Intl、Intl.Collator 等</p><p>（13）WebAssembly</p><p>（14）其他</p><p>例如 arguments</p><h3 id="javascript-变量提升" tabindex="-1"><a class="header-anchor" href="#javascript-变量提升"><span>JavaScript 变量提升</span></a></h3><p>JavaScript 中的变量提升（Hoisting）是指在代码执行之前，JavaScript 引擎会先进行代码解析，将声明的变量和函数提升到作用域的顶部。也就是说，它们在代码执行之前都已经存在于作用域中，可以被访问，不会报错。</p><p>需要注意的是，变量提升只是将变量和函数声明提升到作用域顶部，而不是将它们的赋值也提升了。因此，在变量提升阶段，变量的值是 undefined，函数的函数体并没有被执行。</p><p><strong>提升原因</strong></p><ul><li><p>有利于管理和组织代码：变量提升使得变量可以在声明之前使用，开发者可以在代码的任何位置使用变量，而不必担心变量是否已经声明。变量提升可以使代码更具可读性和可维护性，通过将相关的函数和变量放在一起，可以更清晰地表达代码的意图。</p></li><li><p>作用域的一致性：变量提升确保了在作用域内的所有代码都可以访问相同的变量和函数。这消除了在编写代码时由于变量位置的限制导致的一些不必要的问题。</p></li></ul><p>尽管变量提升为开发者提供了灵活性和方便性，但也需要注意它可能导致的混淆和错误。因此，在编写代码时，建议始终在作用域的顶部明确声明变量和函数，以增加代码的可读性和可维护性。</p><p><strong>预解析变量提升的规则</strong></p><ul><li>把 var 声明的变量提升到当前作用域的最前面，不会提升赋值</li><li>把函数声明提升到当前作用域最前面</li><li>如果函数同名，后者覆盖前者</li><li>函数和变量同名，函数优先</li></ul><h3 id="递归函数" tabindex="-1"><a class="header-anchor" href="#递归函数"><span>递归函数</span></a></h3><p>自己直接或间接的调用自己（一定要留出口，不然就死循环了）</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">Sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n
<span class="token punctuation">}</span>
<span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝和深拷贝"><span>浅拷贝和深拷贝</span></a></h3>`,193),v={href:"https://juejin.cn/post/6844903929705136141",target:"_blank",rel:"noopener noreferrer"},m=a(`<p><strong>浅拷贝</strong>：浅拷贝是指复制对象的属性值，如果属性值是基本数据类型，则复制其实际的值，如果属性值是引用数据类型，则复制其引用地址，更改源对象的引用数据类型的属性值，新对象引用类型的值也会发生变化</p><ul><li><p><code>Object.assign()</code>: 将一个或多个源对象的所有可枚举属性复制到目标对象，并返回目标对象</p></li><li><p><code>展开运算符...</code>: 使用扩展运算符可以将一个数组或对象展开，然后复制到另一个对象中</p></li><li><p><code>手写浅拷贝</code></p></li><li><p><code>函数库lodash的_.clone方法</code></p></li><li><p><code>数组使用Array.prototype.concat()</code>: 将多个数组合并为一个数组</p></li><li><p><code>数组使用Array.prototype.slice()</code></p><p><code>Object.assign()</code>和<code>展开运算符...</code>如果对象的属性值为基础类型，对于拷贝的那个属性值而言就是深拷贝。如果对象的属性值为引用类型，对于拷贝的那个值就是浅拷贝的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloneTarget
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>深拷贝</strong>：而深拷贝则会递归复制所有的子对象和子数组，修改新对象不会影响原对象</p><ul><li><code>JSON.parse(JSON.stringify())</code></li></ul>`,4),b={href:"https://mp.weixin.qq.com/s/3d6PDhiudBsm3cV2jtx2sQ",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>该方法的局限性太多</p><ol><li>不能存放函数或者 Undefined，否则会丢失函数或者 Undefined</li><li>不要存放时间对象，否则会变成字符串形式</li><li>不能存放 RegExp、Error 对象，否则会变成空对象</li><li>不能存放 NaN、Infinity、-Infinity，否则会变成 null</li><li>使用这种方法时，需要注意原始对象中可能包含的不可序列化数据类型，如函数、正则表达式等。</li></ol><ul><li>函数库<code>Loadsh.cloneDeep()</code>方法</li></ul><p>lodash 的 cloneDeep也是深拷贝的手段之一，且非常完善，能成功拷贝各种数据类型</p><p>但是大家要注意使用 lodash 时要使用 lodash-es，这样才能做到按需加载，减少不必要的代码体积</p><ul><li><code>window.structuredClone</code></li></ul><p>全局的 structuredClone() 方法使用结构化克隆算法将给定的值进行深拷贝</p><p>局限性</p><ol><li>当克隆Function、Dom节点时，会报错</li></ol><ul><li><p><code>手写递归</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 不考虑数组</span>
    <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 考虑数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cloneTarget
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="页面传参出现过乱码如何解决" tabindex="-1"><a class="header-anchor" href="#页面传参出现过乱码如何解决"><span>页面传参出现过乱码如何解决</span></a></h3><p>当页面传参出现乱码时，通常是因为编码方式不匹配导致的。例如，你正在使用 UTF-8 编码，但是接收方使用了其他编码方式，如 GBK 或 ISO-8859-1，这就会导致传递的参数出现乱码</p><ul><li>确认编码方式：首先，你需要确定正在使用的编码方式。你可以通过查看 HTML 头部或使用开发者工具来确定页面的编码方式。</li><li>统一编码方式：确保发送和接收参数的两个页面使用相同的编码方式。最好都使用 UTF-8 编码，因为它是最常用的编码方式，并支持所有 Unicode 字符。</li><li>编码参数：使用 JavaScript 的 encodeURIComponent() 函数对参数进行编码，decodeURIComponent() 函数对接收到的参数进行解码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;%E4%BD%A0%E5%A5%BD&quot;</span>

<span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token string">&quot;%E4%BD%A0%E5%A5%BD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;你好&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 URL 中使用 BASE64 编码：如果你需要将参数添加到 URL 中，你可以使用 BASE64 编码对参数进行编码，以确保传递参数时不会出现乱码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5L2g5aW9&quot;</span>
<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&quot;http://example.com?param=&quot;</span> <span class="token operator">+</span> param<span class="token punctuation">;</span> <span class="token comment">// &quot;http://example.com?param=5L2g5aW9&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象和数组遍历的方法" tabindex="-1"><a class="header-anchor" href="#对象和数组遍历的方法"><span>对象和数组遍历的方法</span></a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8272b1968fc427799487799b2ff5d2d~tplv-k3u1fbpfcp-zoom-1.image" alt="JS遍历方法.png"></p><h3 id="传参序列化" tabindex="-1"><a class="header-anchor" href="#传参序列化"><span>传参序列化</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter">paramsList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/api/login&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> paramsList<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是有时候后端要求 Content-Type 必须以 application/x-www-form-urlencoded 形式，那么通过上面传递的参数，后端是收不到的，我们必须对参数数据进行所谓的序列化处理才行，让它以普通表单形式(键值对)发送到后端，而不是 json 形式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loginAPI</span><span class="token punctuation">(</span><span class="token parameter">paramsList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/api/login&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> paramsList<span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">transformRequest</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          result <span class="token operator">+=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;&amp;&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用 qs 模块来序列化参数</strong> 我们也能通过第三方依赖来序列化参数，就更加方便简洁，下载 qs 模块。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>npm install qs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// user.js</span>
<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">&#39;qs&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">loginAPI</span><span class="token punctuation">(</span><span class="token parameter">paramsList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">myAxios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/api/login&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> paramsList<span class="token punctuation">,</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">transformRequest</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是-dom-和-bom" tabindex="-1"><a class="header-anchor" href="#什么是-dom-和-bom"><span>什么是 DOM 和 BOM？</span></a></h3><p><strong>DOM</strong> 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。</p><p><strong>BOM</strong> 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM 的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局） 对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 locati on 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对 象的子对象。</p><ul><li>dom：document.getelementByid、createElement、appendChild insertBefore setAttribute</li><li>bom:open location history settimeout focus</li></ul><h3 id="new-操作符的实现原理" tabindex="-1"><a class="header-anchor" href="#new-操作符的实现原理"><span>new 操作符的实现原理</span></a></h3><p><strong>new 操作符的执行过程：</strong></p><ul><li>首先创建了一个空对象</li><li>让构造函数的 <code>this</code> 指向这个空对象，执行构造函数的代码（为这个新对象添加属性）</li><li>绑定原型，将空对象的原型设置为构造函数的 <code>prototype</code> 对象。</li><li>如果构造函数没有显式返回一个对象，则返回这个新创建的对象</li></ul><p>举例</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用new操作符创建一个Person对象</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: John</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: 30]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，Person 是一个构造函数，通过 new 操作符创建了一个名为 person1 的新对象。在执行 new Person(&#39;John&#39;, 30) 时，会做以下操作：</p><ol><li>创建一个空对象 <code>var obj = {}</code>。</li><li>将 <code>Person.prototype</code> 连接到 <code>obj</code> 的原型链上，即 <code>obj.__proto__ = Person.prototype</code>。</li><li>执行 <code>Person</code> 构造函数，将 this 绑定到新创建的空对象 obj 上，所以 this.name = name; 和 this.age = age; 会将属性添加到 obj 对象上。</li><li>如果构造函数没有返回一个对象，即没有显式使用 return 语句返回一个对象，那么 new 操作符会返回这个新创建的对象 obj。</li><li>需要注意的是，new 操作符在 JavaScript 中实际上是一个语法糖，它隐藏了上述步骤的实现细节。在实际开发中，使用 new 操作符创建对象实例非常常见。</li></ol><p>手写new操作符</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 简易</span>
<span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 创建一个空对象</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 2. 将空对象的原型指向构造函数的原型</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>

  <span class="token comment">// 3. 调用构造函数，将 this 指向新创建的对象，并传入参数</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 4. 如果构造函数内部返回了对象，则返回该对象，否则返回新创建的对象</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="javascript-脚本延迟加载的方式" tabindex="-1"><a class="header-anchor" href="#javascript-脚本延迟加载的方式"><span>JavaScript 脚本延迟加载的方式</span></a></h3><p>延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。</p><ul><li><strong>defer 属性：</strong> 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同时进行，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。</li><li><strong>async 属性：</strong> 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。</li><li><strong>动态创建 DOM 方式：</strong> 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。</li><li><strong>使用 setTimeout 延迟方法：</strong> 设置一个定时器来延迟加载 js 脚本文件</li><li><strong>让 JS 最后加载：</strong> 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。</li></ul><h3 id="javascript-类数组对象的定义" tabindex="-1"><a class="header-anchor" href="#javascript-类数组对象的定义"><span>JavaScript 类数组对象的定义？</span></a></h3><p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p><p><strong>为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?</strong></p><p><code>arguments</code>是一个对象，它的属性是从 0 开始依次递增的数字，还有<code>callee</code>和<code>length</code>等属性，与数组相似；但是它却没有数组常见的方法属性，如<code>forEach</code>, <code>reduce</code>等，所以叫它们类数组。</p><p>常见的类数组转换为数组的方法有这样几种：</p><p>（1）通过 call 调用数组的 slice 方法来实现转换</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（2）通过 call 调用数组的 splice 方法来实现转换</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）通过 apply 调用数组的 concat 方法来实现转换</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arrayLike<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（4）通过 Array.from 方法来实现转换</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（5）使用展开运算符将类数组转化成数组</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> arrArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>
  arrArgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-in-和-for-of-的区别" tabindex="-1"><a class="header-anchor" href="#for-in-和-for-of-的区别"><span>for...in 和 for...of 的区别</span></a></h3><p>都是遍历数据结构的循环语句，但它们的用法和适用场景有所不同。</p><p><strong>for...in</strong></p><ul><li>通常用于遍历对象的键，包括自身属性和继承属性（原型链上的所有可枚举属性），所以性能非常差。如果只遍历自己的属性，可以用<code>obj.hasOwnProperty()</code>来判断是否是自己的属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个父级对象</span>
<span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 以parent为原型,定义一个子级对象</span>
<span class="token keyword">const</span> son <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
son<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历子级对象的属性</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> son<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 age name say</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> son<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>son<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 age</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>循环不保证对象属性的顺序，如果键名都是字符串，那么顺序没问题，这也是我们大多数的使用情况，要是出现其他类型的键名，顺序可能就有问题了</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;数字2&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 name age say</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>for...of</strong></p><ul><li>遍历获对象的值，只能用来遍历部署了<code>iterator</code>接口的迭代器对象，如遍历数组、字符串、类数组对象、Set、Map 以及 Generator 对象，遍历普通对象会报错</li></ul><p>为了避免 for...in 循环的一些缺点，可以考虑使用其他遍历方式，例如 for...of 循环、Object.keys()、Object.values()、Object.entries() 等方法来遍历对象属性。这些方法提供了更可控和可预测的遍历方式，且不受到继承属性和属性遍历顺序的影响。</p><h3 id="如何使用-for-of-遍历普通对象" tabindex="-1"><a class="header-anchor" href="#如何使用-for-of-遍历普通对象"><span>如何使用 for...of 遍历普通对象</span></a></h3><ul><li>借助Object.keys()、Object.values()、Object.entries()，它们都可以返回一个数组，数组也是迭代器对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>给普通对象添加一个[Symbol.iterator]属性，实现一个迭代器，并指向这个迭代器即可。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//方法一：</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> obj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>count<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 方法二 Generator函数</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">of</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何跳出-foreach-循环" tabindex="-1"><a class="header-anchor" href="#如何跳出-foreach-循环"><span>如何跳出 forEach 循环</span></a></h3><p>接收一个函数作为参数，并对数组中的每个元素依次调用该函数，但是它本身并没有提供跳出循环的功能，因为它是一种函数式编程的方式，是对每个元素进行操作，而不是对整个数组进行操作。</p><ul><li>使用try catch抛出异常的方式跳出循环。这种方法比较暴力，不推荐使用。</li><li>使用return或return false来跳过当前元素的执行。这种方法相当于continue，只能跳过本次循环，不能终止所有循环。</li><li>使用其他的迭代方法，如some、every、find等，它们可以根据回调函数的返回值来决定是否继续循环。</li><li>使用普通的for循环或者for…of循环，它们可以使用break或continue来控制循环。</li></ul><h3 id="object-和-map-和-weakmap的区别" tabindex="-1"><a class="header-anchor" href="#object-和-map-和-weakmap的区别"><span>Object 和 Map 和 WeakMap的区别</span></a></h3><p><strong>Object和Map</strong></p><ul><li>Map是有序的键值对集合，Object 中的属性是无序的</li><li>Map 的键可以是任意类型，包括函数、对象，Object 的键必须是 String 或是 Symbol</li><li>Map 部署了迭代器接口的，可以使用for...of迭代，Object不能使用for...of</li><li>Map 的性能更好，Map 不会像 Object 一样有原型链的存在，因此在存储大量数据时，Map 可能占用的内存更少</li></ul><p>根据具体的使用场景和需求，你可以选择使用 Object 或 Map 来存储和操作数据。如果需要有序的键值对、键的类型灵活性以及更好的性能，可以考虑使用 Map。如果只需要简单的键值对存储，并且不需要关注顺序和键的类型，可以使用 Object。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个空的 Map 对象</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;key2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;key3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value3&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用数组初始化 Map</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>WeakMap</strong></p><p>WeakMap 的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p><ul><li>WeakMap 只接受对象作为键名（null除外）</li><li>内存管理： WeakMap 是弱引用的，它不会阻止键对象被垃圾回收。当键对象没有被其他引用持有时，它会被自动从 WeakMap 中移除，释放对应的内存。这使得 WeakMap 适合用于在对象上存储额外的数据，而不会导致对象本身无法被垃圾回收。</li><li>WeakMap不能迭代，也没有Map的size属性和clear方法</li></ul><p>总结来说，Map 是通用的键值对集合，适用于需要存储和操作任意类型的键和值的场景。而 WeakMap 是一种特殊的 Map，适用于需要与对象关联的附加数据，且不干扰对象的垃圾回收的场景。</p><h3 id="对ajax的理解-实现一个ajax请求" tabindex="-1"><a class="header-anchor" href="#对ajax的理解-实现一个ajax请求"><span>对AJAX的理解，实现一个AJAX请求</span></a></h3><p>AJAX 是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p><p><strong>创建 AJAX 请求的步骤</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">SERVER_URL</span> <span class="token operator">=</span> <span class="token string">&#39;/server&#39;</span>
<span class="token comment">// 1. 创建一个 XMLHttpRequest 对象</span>
<span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 2. 在这个对象上使用 open 方法创建一个 HTTP 请求，参数是请求的方法、请求的地址、是否异步和用户的认证信息</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token comment">// 3. 在发起请求前，可以为这个对象添加一些信息和监听函数</span>
<span class="token comment">// 3.1 设置状态监听函数</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 当请求成功时</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 3.2 设置请求失败时的监听函数</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 3.3 设置请求头信息</span>
xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Accept&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 4. 发送 Http 请求</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ajax、axios、fetch-的区别" tabindex="-1"><a class="header-anchor" href="#ajax、axios、fetch-的区别"><span>ajax、axios、fetch 的区别</span></a></h3><p><strong>（1）AJAX</strong></p>`,90),y={href:"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%E7%BD%91%E9%A1%B5",target:"_blank",rel:"noopener noreferrer"},f=a(`<ul><li>本身是针对 MVC 编程，不符合前端 MVVM 的浪潮</li><li>基于原生 XHR 开发，XHR 本身的架构不清晰</li><li>不符合关注分离（Separation of Concerns）的原则</li><li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li></ul><p><strong>（2）Fetch</strong></p><p>fetch 号称是 AJAX 的替代品，是在 ES6 出现的，使用了 ES6 中的 promise 对象。Fetch 是基于 promise 设计的。Fetch 的代码结构比起 ajax 简单多。<strong>fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象</strong>。</p><p>fetch 的优点：</p><ul><li>语法简洁，更加语义化</li><li>基于标准 Promise 实现，支持 async/await</li><li>更加底层，提供的 API 丰富（request, response）</li><li>脱离了 XHR，是 ES 规范里新的实现方式</li></ul><p>fetch 的缺点：</p><ul><li>fetch 只对网络请求报错，对 400，500 都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li><li>fetch 默认不会带 cookie，需要添加配置项： fetch(url, {credentials: &#39;include&#39;})</li><li>fetch 不支持 abort，不支持超时控制，使用 setTimeout 及 Promise.reject 的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li><li>fetch 没有办法原生监测请求的进度，而 XHR 可以</li></ul><p><strong>（3）Axios</strong></p><p>Axios 是一种基于 Promise 封装的 HTTP 客户端，其特点如下：</p><ul><li>浏览器端发起 XMLHttpRequests 请求</li><li>node 端发起 http 请求</li><li>支持 Promise API</li><li>监听请求和返回</li><li>对请求和返回进行转化</li><li>取消请求</li><li>自动转换 json 数据</li><li>客户端支持抵御 XSRF 攻击</li></ul><h3 id="对-json-的理解" tabindex="-1"><a class="header-anchor" href="#对-json-的理解"><span>对 JSON 的理解</span></a></h3><p>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。</p><p>在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，</p><ul><li>JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。</li><li>JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。</li></ul><h3 id="常用的正则表达式有哪些" tabindex="-1"><a class="header-anchor" href="#常用的正则表达式有哪些"><span>常用的正则表达式有哪些</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// （1）匹配 16 进制颜色值</span>
<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token comment">// （2）匹配日期，如 yyyy-mm-dd 格式</span>
<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class="token regex-delimiter">/</span></span>

<span class="token comment">// （3）匹配 qq 号</span>
<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9][0-9]{4,10}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token comment">// （4）手机号码正则</span>
<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[34578]\\d{9}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>

<span class="token comment">// （5）用户名正则</span>
<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$</span><span class="token regex-delimiter">/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="use-strict-是什么意思" tabindex="-1"><a class="header-anchor" href="#use-strict-是什么意思"><span>use strict 是什么意思</span></a></h3><p>严格模式是 ECMAScript 5 引入的一种更严格的 JavaScript 解析和执行模式，通过在脚本或函数的开头添加 &quot;use strict&quot; 指令，可以将相应的代码段置于严格模式下。通过使用严格模式，可以避免一些常见的 JavaScript 错误，并提供更严格的代码约束，有助于编写更可靠、安全的 JavaScript 代码。</p><p><strong>特点</strong></p><ul><li>变量必须先声明后使用：在严格模式下，变量必须使用 var、let 或 const 关键字进行声明，否则会抛出错误。</li><li>禁止删除变量、函数和函数参数：严格模式下，使用 delete 关键字删除变量、函数和函数参数会引发错误。</li><li>禁止使用未声明的变量：格模式下，使用未声明的变量会引发错误。</li><li>函数中的 this 值为 undefined：在严格模式下，函数内部的 this 值为 undefined，而不是指向全局对象。</li><li>禁止重复的函数参数名：在严格模式下，函数参数名不能重复，重复参数会导致语法错误。</li><li>禁止使用 with 语句。</li></ul><h3 id="强类型语言和弱类型语言的区别" tabindex="-1"><a class="header-anchor" href="#强类型语言和弱类型语言的区别"><span>强类型语言和弱类型语言的区别</span></a></h3><p><strong>强类型语言</strong></p><ul><li>强类型语言要求变量在使用前必须<code>先定义其类型</code>，并且类型一旦确定后就<code>不能随意改变</code>。</li><li>在强类型语言中，编译器或解释器会严格检查变量的类型，并在类型不匹配时给出错误提示。</li><li>强类型语言提供了更严格的类型检查和类型转换规则，以保证程序的类型安全性和一致性。</li><li>Java 和 C++等语言都是强制类型定义的</li></ul><p><strong>弱类型语言</strong></p><ul><li>弱类型语言相对于强类型语言更宽松，变量的类型可以在运行时自动推断或隐式转换。</li><li>在弱类型语言中，变量的类型可以根据赋值操作或上下文的需要而随意改变，无需显式地声明或定义类型。</li><li>弱类型语言对类型的检查较为宽松，允许进行隐式的类型转换，但可能会导致一些意外的行为或错误。</li><li>JavaScript 是弱类型定义的，可以将字符串&#39;12&#39;和整数 3 进行连接得到字符串&#39;123&#39;，在相加的时候会进行强制类型转换。</li></ul><p>两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。</p><h3 id="解释性语言和编译型语言的区别" tabindex="-1"><a class="header-anchor" href="#解释性语言和编译型语言的区别"><span>解释性语言和编译型语言的区别</span></a></h3><ul><li>解释性语言的代码是逐行解释执行的，而编译型语言的代码是事先编译成可执行的机器码。</li><li>解释性语言不需要事先的编译步骤，可以直接运行，而编译型语言需要先进行编译。</li><li>解释性语言的执行过程边解释边执行，即时得到结果，而编译型语言的执行是一次性执行编译后的机器码。</li></ul><p>JavaScript、Python 等属于解释型语言，C、C++等属于编译型语言。</p><h3 id="js对url进行编码有哪些方式" tabindex="-1"><a class="header-anchor" href="#js对url进行编码有哪些方式"><span>JS对URL进行编码有哪些方式</span></a></h3><p><strong>encodeURI()</strong></p><ul><li>encodeURI 方法用于对完整的 URL 进行编码，将所有非 ASCII 字符转换为它们的十六进制表示。</li><li>只会编码空格（ %20 表示）不会对某些保留字符进行编码，如 /、?、&amp; 等，因为它们在 URL 中具有特殊含义</li><li><code>decodeURI()</code>这个方法用来解码</li></ul><p><strong>encodeURIComponent()</strong></p><ul><li>用来编码 URL 中的查询参数或片段标识符，将所有非 ASCII 字符转换为它们的十六进制表示</li><li>encodeURIComponent 方法会编码所有特殊字符 包括保留字符 /、?、&amp; 等。</li><li><code>decodeURIComponent()</code>用来解码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.example.com/path with spaces?query=Hello World&amp;param=Some Value&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 使用 encodeURI 对整个 URL 进行编码</span>
<span class="token keyword">const</span> encodedURL <span class="token operator">=</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encodedURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：https://www.example.com/path%20with%20spaces?query=Hello%20World&amp;param=Some%20Value</span>

<span class="token comment">// 使用 encodeURIComponent 对查询字符串进行编码</span>
<span class="token keyword">const</span> encodedQuery <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encodedQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出：https%3A%2F%2Fwww.example.com%2Fpath%20with%20spaces%3Fquery%3DHello%20World%26param%3DSome%20Value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>escape</strong></p><ul><li>用于对字符串进行编码，escape方法将特殊字符转换为十六进制转义序列，如 %20 表示空格</li><li>escape 方法编码除了字母、数字和以下字符之外的所有字符：@*/+-%_</li><li>unescape()这个方法用来将使用 escape() 方法编码的字符串解码</li><li>注意，escape 方法已经被废弃，并不建议在新的代码中使用。</li></ul><h3 id="base64编码方式" tabindex="-1"><a class="header-anchor" href="#base64编码方式"><span>base64编码方式</span></a></h3><ol><li>使用浏览器内置的btoa()和atob()函数：</li></ol><p>btoa()函数用于创建一个基于Base64编码的ASCII字符串，由一个二进制数据的&quot;字符串&quot;表示。这意味着你需要先将数据转换为某种二进制格式（通常是Uint8Array），然后再使用btoa()。同样，atob()函数用于解码一个先前由btoa()创建的Base64编码的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>  
<span class="token keyword">let</span> base64 <span class="token operator">=</span> <span class="token function">btoa</span><span class="token punctuation">(</span><span class="token function">unescape</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: &quot;SGVsbG8sIHdvcmxkIQ==&quot;  </span>
  
<span class="token keyword">let</span> decodedStr <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token function">escape</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decodedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: &quot;Hello, world!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，btoa()和atob()只能处理拉丁字符。对于非拉丁字符（如中文），你需要先使用encodeURIComponent()和decodeURIComponent()进行编码和解码。</p><ol start="2"><li>使用第三方库：</li></ol><p>如果你需要处理更复杂的情况，或者希望有更灵活的控制，你可能会想要使用第三方库。例如，js-base64库提供了一个更强大且易于使用的API。你可以通过npm安装它：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> js-base64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Base64 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;js-base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Base64<span class="token punctuation">;</span>  
  
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>  
<span class="token keyword">let</span> base64 <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: &quot;SGVsbG8sIHdvcmxkIQ==&quot;  </span>
  
<span class="token keyword">let</span> decodedStr <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decodedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: &quot;Hello, world!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="encodeuricomponent和btoa的区别" tabindex="-1"><a class="header-anchor" href="#encodeuricomponent和btoa的区别"><span>encodeURIComponent和btoa的区别</span></a></h3><p>encodeURIComponent和btoa在JavaScript中都是用于编码的函数，但它们之间存在一些重要的区别：</p><ul><li>编码目的与范围： encodeURIComponent：主要用于将字符串作为URI组件进行编码。它主要针对的是URL的查询字符串参数，以确保在URL中传输的数据不会被错误地解析或截断。它会编码除ASCII字母、数字、- _ . ! ~ * ’ ( )之外的所有字符。编码后的效果是%XX或%uXXXX这种形式。 btoa：则用于将Unicode字符串或二进制数据转换为一个Base64编码的字符串。Base64编码常用于在文本中嵌入二进制数据，确保数据在传输过程中不会被破坏。它主要关注的是将数据转换为一种可以在文本中安全传输的格式。</li><li>编码后的格式： encodeURIComponent编码后的字符串格式是%后面跟着两位或四位十六进制数。 btoa编码后的字符串则是由A-Z、a-z、0-9、+和/组成的Base64字符串。</li><li>适用场景： encodeURIComponent通常用于URL参数传递的场景，当参数中包含特殊字符（如空格）时，可以确保这些字符被正确传递和解析。 btoa则更多地用于数据的编码和解码，比如对密码进行加密，或者实现字符串的直接传输而不受特定字符集的限制。</li><li>字符集处理： encodeURIComponent不会对ASCII字母、数字和一些标点符号进行编码。 btoa则可以处理Unicode字符串，将其转换为Base64编码，这使得它在处理包含非ASCII字符的字符串时更为强大。 总结来说，encodeURIComponent和btoa在编码目的、编码后的格式、适用场景以及字符集处理方面都存在差异。选择使用哪个函数取决于你的具体需求，比如你是需要编码URL参数还是需要对数据进行Base64编码</li></ul><h3 id="file-blob-filereader-arraybuffer-base64" tabindex="-1"><a class="header-anchor" href="#file-blob-filereader-arraybuffer-base64"><span>File Blob FileReader ArrayBuffer Base64</span></a></h3><p><img src="`+u+'" alt="alt"></p><h2 id="三、原型与原型链" tabindex="-1"><a class="header-anchor" href="#三、原型与原型链"><span>三、原型与原型链</span></a></h2><h3 id="对原型、原型链的理解" tabindex="-1"><a class="header-anchor" href="#对原型、原型链的理解"><span>对原型、原型链的理解</span></a></h3><p><strong>原型</strong></p><ul><li>JavaScript 中每一个构造函数的内部都有一个 prototype 属性，<code>构造函数.prototype</code>就是<code>显示原型</code></li><li><code>构造函数.prototype.constructor</code>指向构造函数本身</li><li>使用构造函数创建一个实例，<code>实例.__proto__</code>就是隐式原型，它和<code>构造函数.prototype</code>指向同一个对象。所以<code>实例.__proto__</code> === <code>构造函数.prototype</code>。构造函数的所有实例都可以访问这个原型对象上的属性和方法</li></ul><p><strong>原型链</strong></p><ul><li>当访问一个对象的属性或方法时，首先查找对象自身有没有这个属性，如果有直接返回，如果没有查找隐式原型<code>__proto__</code>上的属性</li><li>如果原型上没有，就去查找原型的原型，一直查到  <code>Object</code>  内置对象为止(<code>原型链的尽头Object.prototype.__proto__ === null</code>)，这条查找的路径就是<code>原型链</code></li><li>如果最后也没找到，就是 undefined</li></ul><p><img src="'+r+`" alt="alt"></p><p><code>用途</code></p><ul><li>数据共享，节约内存</li><li>实现属性方法的继承，简化代码，实现代码重用</li></ul><p><strong>js 获取原型的方法</strong></p><ul><li><code>p.__proto__</code>：现在浏览器中都实现了 <code>__proto__</code> 属性来访问，但是不推荐，因为它不是规范中规定的</li><li><code>p.constructor.prototype</code></li><li><code>Object.getPrototypeOf(p)</code>： 推荐</li></ul><p><strong>其他相关 api</strong></p><ul><li><code>hasOwnProperty()</code>：判断属性属于自身还是原型链</li><li><code>isPrototypeOf()</code>: 用于检测某个对象的 prototype 是不是检测对象的原型</li></ul><h3 id="原型修改、重写" tabindex="-1"><a class="header-anchor" href="#原型修改、重写"><span>原型修改、重写</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token comment">// 修改原型</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> p<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token comment">// 重写原型</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> p<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到修改原型的时候 p 的构造函数不是指向 Person 了，因为直接给 Person 的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数 Object，所以这时候<code>p.constructor === Object</code> ，而不是<code>p.constructor === Person</code>。要想成立，就要用 constructor 指回来：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Person
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> p<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原型链指向" tabindex="-1"><a class="header-anchor" href="#原型链指向"><span>原型链指向</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>p<span class="token punctuation">.</span>__proto__ <span class="token comment">// Person.prototype</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token comment">// Object.prototype</span>
p<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token comment">//Object.prototype</span>
p<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token comment">// Object.prototype</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token comment">// Object.prototype</span>
p1<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor <span class="token comment">// Person</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token comment">// Person</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>p<span class="token punctuation">.</span>__proto__ <span class="token comment">// Person.prototype</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token comment">// Object.prototype</span>
p<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token comment">//Object.prototype</span>
p<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token comment">// Object.prototype</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token comment">// Object.prototype</span>
p1<span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor <span class="token comment">// Person</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token comment">// Person</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、执行上下文-作用域链-闭包" tabindex="-1"><a class="header-anchor" href="#四、执行上下文-作用域链-闭包"><span>四、执行上下文/作用域链/闭包</span></a></h2><h3 id="对闭包的理解" tabindex="-1"><a class="header-anchor" href="#对闭包的理解"><span>对闭包的理解</span></a></h3><p><code>函数内部能够访问到其外部作用域中的变量的能力</code>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过内部函数访问外部函数的局部变量，变量不会被垃圾回收机制回收。其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。</p><p><strong>特性：</strong></p><ul><li>函数内再嵌套函数</li><li>内部函数可以引用外层的参数和变量</li><li>参数和变量不会被垃圾回收机制回收(造成内存泄漏)</li></ul><p><strong>用途</strong></p><ul><li><code>创建私有变量</code>: 变量就不会暴露在全局作用域中，从而实现了私有变量的效果</li><li><code>可以保留变量的状态</code>： 闭包可以保存变量状态，即使变量所在的函数已经执行完毕。这种机制使得闭包可以用来实现一些异步编程的场景，比如定时器、事件处理等。</li></ul><p><strong>缺点</strong>是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露</p><p><strong>场景</strong>：防抖节流，计数器等</p><p>比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
  window<span class="token punctuation">.</span><span class="token function-variable function">B</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先因为 <code>setTimeout</code> 是个异步函数，所以会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。解决办法有三种：</p><ul><li>第一种是使用闭包的方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> j <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，首先使用了立即执行函数将 <code>i</code> 传入函数内部，这个时候值就被固定在了参数 <code>j</code> 上面不会改变，当下次执行 <code>timer</code> 这个闭包的时候，就可以使用外部函数的变量 <code>j</code>，从而达到目的。</p><ul><li>第二种就是使用 <code>setTimeout</code> 的第三个参数，这个参数会被当成 <code>timer</code> 函数的参数传入。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>
    i
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三种就是使用 <code>let</code> 定义 <code>i</code> 了来解决问题了，这个也是最为推荐的方式</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h3><p>执行上下文是用来描述了 JavaScript 代码在运行时的执行环境和状态。在执行JS 代码之前，需要先解析代码把即变量声明、函数声明、作用域链和this信息先拿出来，创建一个全局执行上下文环境，添加到执行上下文栈中，然后才开始正式的执行程序。</p><p><strong>执行上下文</strong></p><p><code>全局执行上下文:</code> 在 JavaScript 代码执行之初，会创建一个全局执行上下文。全局执行上下文是默认的最外层执行上下文，它包含了全局作用域中的变量和函数，并且在整个代码执行过程中都存在。</p><p><code>函数执行上下文:</code>每当调用一个函数时，都会创建一个对应的函数执行上下文。函数执行上下文包含了函数内部的变量、函数参数、函数作用域链等信息。当函数执行完毕后，对应的函数执行上下文会从执行上下文栈中被移除。</p><p><code>执行上下文栈</code>： 也称为调用栈，用于管理执行上下文的创建和销毁顺序。当前正在执行的执行上下文位于栈顶，执行完毕后被移除，然后下一个执行上下文开始执行。</p><p>当 JavaScript 执行代码时，首先遇到全局代码，会创建一个<code>全局执行上下文并且压入执行栈中</code>，每当遇到一个函数调用，就会<code>为该函数创建一个新的执行上下文并压入栈顶</code>，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</p><h3 id="对作用域、作用域链的理解" tabindex="-1"><a class="header-anchor" href="#对作用域、作用域链的理解"><span>对作用域、作用域链的理解</span></a></h3><p><strong>作用域</strong></p><p>是指代码中变量和函数可访问的范围，JavaScript中有两种作用域：全局作用域和函数作用域</p><ul><li>全局作用域: 在代码的任何地方都可以访问的变量或函数，全局作用域只要页面不卸载，就一直存在，不释放。</li><li>函数作用域: 函数内部定义的变量或函数，只能在该函数内部访问，当函数调用结束时，这个作用域就释放了</li></ul><p><strong>作用域链</strong></p><p>作用域链是指在当前作用域中查找变量或函数时，JavaScript会沿着嵌套的函数作用域逐级向外查找，直到找到对应的变量或函数。作用域链的顶端是全局作用域，如果在全局作用域中也找不到变量或函数，则会抛出<code>xxx is not defined</code>的错误。</p><p><strong>作用域链的作用</strong></p><p>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链来解决变量访问的问题</p><h3 id="对-this-对象的理解" tabindex="-1"><a class="header-anchor" href="#对-this-对象的理解"><span>对 this 对象的理解</span></a></h3><p>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。</p><ul><li><code>函数调用模式:</code> 当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象 window</li><li><code>方法调用模式:</code> 如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</li><li><code>构造函数调用模式:</code> 如果一个函数用 new 调用时，this 指向实例。</li><li><code>apply、call 和 bind 调用模式:</code> 这三个方法都可以显示的指定调用函数的 this 指向。</li></ul><p><strong>this 指向</strong></p><ul><li>普通函数中 this 指向 window</li><li>构造函数中 this 指向实例化对象</li><li>箭头函数中没有 this，如果输出 this，就会输出箭头函数定义时所在的作用域中的 this</li><li>对象中 this 指向本身</li><li>计时器中 this 指向 window</li><li>事件处理函数中，this 指向触发事件的对象</li><li>call、apply、bind 可以改变函数的 this 指向(call)</li></ul><h3 id="call、apply、bind的区别" tabindex="-1"><a class="header-anchor" href="#call、apply、bind的区别"><span>call、apply、bind的区别</span></a></h3><p>call、apply 和 bind 是 JavaScript 中用于改变函数执行上下文（即函数内部的 this 值）的方法</p><p>call 和 apply 方法用于立即改变函数的执行上下文，并执行函数，它们的区别在于参数传递方式，call 是参数列表，apply是参数数组。bind 方法返回一个新函数，延迟执行原函数，并将指定的上下文绑定到新函数中</p><p><code>call（参数一，参数二....后面是参数列表）</code></p><ul><li>第一个参数：this 指向的参数，没有参数就是普通调用</li><li>伪数组转真数组：arguments = Array.prototype.slice.call(arguments)</li></ul><p><code>apply(参数1，[num1,num2....])</code></p><ul><li>方法和 call 一样，区别是后面是参数数组，call 是参数列表</li><li>求数组最小值：var min = Math.min.apply(null,arr)</li></ul><p><code>bind</code></p><ul><li>function.bind(obj, arg1, arg2, ...)</li><li>bind 方法返回一个新函数，不会执行原函数，并将指定的上下文绑定到新函数中</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 使用 bind 方法创建一个新函数，并将 person 对象作为执行上下文</span>
<span class="token keyword">const</span> boundGreet <span class="token operator">=</span> <span class="token function">greet</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 自己调用新函数</span>
<span class="token function">boundGreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、面向对象" tabindex="-1"><a class="header-anchor" href="#五、面向对象"><span>五、面向对象</span></a></h2><h3 id="对象创建的方式有哪些" tabindex="-1"><a class="header-anchor" href="#对象创建的方式有哪些"><span>对象创建的方式有哪些？</span></a></h3><p><a href="%5Bhttps://%5D(https://xxxgitone.github.io/2017/06/10/JavaScript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%83%E7%A7%8D%E6%96%B9%E5%BC%8F/)">文章</a></p><p><code>1.直接对象字面量/内置构造函数</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;dz&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token comment">// 优点： 简单、快捷，适合创建小型对象</span>
<span class="token comment">// 缺点： 创建多个类似的对象，需要写大量重复的代码 代码冗余</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>3.工厂模式</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  obj<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  obj<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz1&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> person<span class="token punctuation">.</span>__proto_<span class="token punctuation">)</span> <span class="token comment">// -&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。<code>缺点</code>创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。</p><p><code>4.构造函数</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayname</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz1&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">,</span> p2 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment">// --&gt; true true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数模式相对于工厂模式的<code>优点</code>是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。<code>缺点</code> 构造函数的每个方法都要在每个实例上重新创建一次，浪费内存</p><p><code>5.原型模式</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>likes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;watermelon&#39;</span><span class="token punctuation">]</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayname</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz1&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>

p1<span class="token punctuation">.</span>likes<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; 删除 watermelon</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name <span class="token operator">==</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// -&gt; true,  p2的属性覆盖了p1的属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>likes<span class="token punctuation">)</span> <span class="token comment">// -&gt; [&#39;apple&#39;, &#39;banana&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>likes<span class="token punctuation">)</span> <span class="token comment">// -&gt; [&#39;apple&#39;, &#39;banana&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为通过构造函数创建的所有实例都能共享原型上的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说<code>优点</code>: 解决了函数对象的复用问题。<code>缺点</code>： 一个是没有办法通过传入参数来初始化值，所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。</p><p><code>6.组合模式(构造函数模式+原型模式)</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayname</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz1&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// dz dz1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，<code>通过构造函数来初始化对象的属性</code>，<code>通过原型对象来实现函数方法的复用</code>。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。</p><hr><p><strong>后面是高级模式</strong></p><p><code>7.动态原型模式</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sayname <span class="token operator">!=</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayname</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>sayname<span class="token punctuation">)</span> <span class="token comment">// -&gt; dz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。</p><p><code>8.寄生构造函数</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">SpecialArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
  array<span class="token punctuation">.</span><span class="token function-variable function">toPipedString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;|&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> array
<span class="token punctuation">}</span>
<span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecialArray</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">toPipedString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// red|green|pink</span>
<span class="token function">alert</span><span class="token punctuation">(</span>colors <span class="token keyword">instanceof</span> <span class="token class-name">SpecialArray</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个模式，除了使用new操作符并把使用的包装函数叫做构造函数之外，和工厂模式几乎一样。构造函数如果不返回对象，默认也会返回一个新的对象，通过在构造函数的末尾添加一个return语句，可以重写调用构造函数时返回的值</p><p><code>9.稳妥构造函数模式</code></p><p>先说稳妥二字, 别人定义了一个稳妥对象, 即没有公共属性, 而且其方法也 <code>不引用this对象</code>, 这种模式适应于一些安全环境中(禁止使用 this 和 new), 或防止数据被其他应用程序改动, 像下面这样：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  obj<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Stan&#39;</span><span class="token punctuation">,</span> <span class="token number">0000</span><span class="token punctuation">,</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 这里没有使用new操作符</span>
person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Stan</span>
<span class="token function">alert</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先明白稳妥对象指的是没有公共属性，而且其方法也不引用this。稳妥对象最适合在一些安全环境中（这些环境会禁止使用this和new），或防止数据被其他应用程序改动时使用。稳妥构造函数模式和寄生模式类似，有两点不同:一是创建对象的实例方法不引用this，而是不使用new操作符调用构造函数。和寄生构造函数模式一样，这样创建出来的对象与构造函数之间没有什么关系，instanceof操作符对他们没有意义</p><p><code>10. class</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// constructor构造函数</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>

  <span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//原型上的</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;dz&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
per<span class="token punctuation">.</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// -&gt; dz</span>
Person<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>constructor</code>是构造方法，类似构造函数, 定义这个方法里面的内容都是实例自身的属性和方法, 不会被其他实例共享, 而写在外面的<code>sayname</code>表示原型上的方法, 是会被<code>共享</code>的.</p><p><code>static</code> 表示静态，加了 static 的函数<code>不会</code>挂载到<code>prototype</code> 上,而是挂载到 <code>class类</code> 上, 类似于:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象继承的方式有哪些" tabindex="-1"><a class="header-anchor" href="#对象继承的方式有哪些"><span>对象继承的方式有哪些</span></a></h3><ul><li>原型链继承：通过将子类的原型指向父类的实例来实现继承。优点是简单易用，缺点是不能传递参数，且如果修改父类的实例属性会影响到所有子类的实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 父类</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;animal&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//子类</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;animal&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>借用构造函数继承：在子类的构造函数中调用父类构造函数，使用call或apply将父类实例属性复制到子类实例中。优点是可以传递参数，缺点是无法复用父类原型上的方法。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;animal&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Tom&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;animal&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>组合继承：结合了原型链继承和构造函数继承的优点，先使用构造函数继承父类实例属性，然后将子类的原型指向父类的实例，这样子类就能够访问到父类原型上的方法。缺点是会调用两次父类构造函数，导致父类实例属性会被重复赋值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am an&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span>

<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;animal&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Tom&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;animal&#39;</span>
dog<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;I am an animal&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>原型式继承：通过浅复制一个已有对象的属性来创建一个新的对象，然后修改新对象的属性来实现继承。优点是可以快速创建一个新对象并复用已有对象的属性，缺点是共享了原型对象，如果修改了原型对象的属性，则所有继承自该对象的实例都会受到影响</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;animal&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am an&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> dog <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>寄生式继承： 一种基于原型继承的编程模式，它的核心思想是创建一个新对象，并且在这个对象上增加需要的属性和方法，然后将这个对象返回。这个模式的优点在于可以避免直接修改父对象，同时也能够利用父对象的方法和属性，缺点则在于增加了对象层次，增加了系统的复杂性。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>
<span class="token comment">// 父对象</span>
<span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;parent&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token parameter">parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个新对象，以父对象为原型</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 在新对象上增加一个新的方法</span>
  obj<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回新对象</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个新对象，并且以parent为原型</span>
<span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用child对象的方法</span>
child<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello!&quot;</span>

<span class="token comment">// 调用parent对象的方法</span>
child<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;My name is parent&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>寄生式组合继承: 结合了寄生式继承和组合继承的优点。它的核心思想是先使用组合继承方式，继承父对象的属性和方法，并且在新对象上增加需要的属性和方法，最后返回新对象。这个模式的优点在于避免了组合继承方式的缺点，同时又能够继承父对象的属性和方法，缺点则在于比较复杂，容易出错。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 父对象</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 子对象</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 继承父对象的属性</span>
  <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 继承父对象的方法</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span>

<span class="token comment">// 在子对象上增加一个新的方法 bark</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bark</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; barks.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个新对象</span>
<span class="token keyword">var</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;Fido&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用 myDog 对象的方法</span>
myDog<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;My name is Fido&quot;</span>
myDog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Fido barks.&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,169);function h(j,w){const t=o("ExternalLinkIcon");return c(),l("div",null,[k,n("p",null,[n("a",v,[s("读这一篇文章就行"),p(t)])]),m,n("p",null,[n("a",b,[s("参考"),p(t)])]),g,n("p",null,[s("Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式"),n("a",y,[s("网页"),p(t)]),s("应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：")]),f])}const _=e(d,[["render",h],["__file","index.html.vue"]]),S=JSON.parse('{"path":"/js/","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"一、数据类型","slug":"一、数据类型","link":"#一、数据类型","children":[{"level":3,"title":"JavaScript 有哪些数据类型，区别","slug":"javascript-有哪些数据类型-区别","link":"#javascript-有哪些数据类型-区别","children":[]},{"level":3,"title":"数据类型检测的方式有哪些","slug":"数据类型检测的方式有哪些","link":"#数据类型检测的方式有哪些","children":[]},{"level":3,"title":"判断数组数据类型的方法","slug":"判断数组数据类型的方法","link":"#判断数组数据类型的方法","children":[]},{"level":3,"title":"null 和 undefined 区别","slug":"null-和-undefined-区别","link":"#null-和-undefined-区别","children":[]},{"level":3,"title":"typeof null 为什么是Object","slug":"typeof-null-为什么是object","link":"#typeof-null-为什么是object","children":[]},{"level":3,"title":"intanceof 操作符的实现原理","slug":"intanceof-操作符的实现原理","link":"#intanceof-操作符的实现原理","children":[]},{"level":3,"title":"string 有哪些原生方法？","slug":"string-有哪些原生方法","link":"#string-有哪些原生方法","children":[]},{"level":3,"title":"数组有哪些原生方法？","slug":"数组有哪些原生方法","link":"#数组有哪些原生方法","children":[]},{"level":3,"title":"为什么 0.1+0.2 !== 0.3，如何让其相等","slug":"为什么-0-1-0-2-0-3-如何让其相等","link":"#为什么-0-1-0-2-0-3-如何让其相等","children":[]},{"level":3,"title":"typeof NaN 的结果是什么？","slug":"typeof-nan-的结果是什么","link":"#typeof-nan-的结果是什么","children":[]},{"level":3,"title":"isNaN 和 Number.isNaN 函数的区别","slug":"isnan-和-number-isnan-函数的区别","link":"#isnan-和-number-isnan-函数的区别","children":[]},{"level":3,"title":"js 的数据类型的转换","slug":"js-的数据类型的转换","link":"#js-的数据类型的转换","children":[]},{"level":3,"title":"Object.is() 与 ===与== 的区别","slug":"object-is-与-与-的区别","link":"#object-is-与-与-的区别","children":[]},{"level":3,"title":"==比较运算符的会隐式转换","slug":"比较运算符的会隐式转换","link":"#比较运算符的会隐式转换","children":[]},{"level":3,"title":"其他值到字符串的转换规则？","slug":"其他值到字符串的转换规则","link":"#其他值到字符串的转换规则","children":[]},{"level":3,"title":"其他值到数字值的转换规则？","slug":"其他值到数字值的转换规则","link":"#其他值到数字值的转换规则","children":[]},{"level":3,"title":"其他值到布尔类型的值的转换规则？","slug":"其他值到布尔类型的值的转换规则","link":"#其他值到布尔类型的值的转换规则","children":[]},{"level":3,"title":"&& 和 || 和 ! 运算符分别能做什么","slug":"和-和-运算符分别能做什么","link":"#和-和-运算符分别能做什么","children":[]},{"level":3,"title":"什么是 JavaScript 中的包装类型？","slug":"什么是-javascript-中的包装类型","link":"#什么是-javascript-中的包装类型","children":[]},{"level":3,"title":"为什么会有BigInt的提案？","slug":"为什么会有bigint的提案","link":"#为什么会有bigint的提案","children":[]}]},{"level":2,"title":"二、JavaScript 基础","slug":"二、javascript-基础","link":"#二、javascript-基础","children":[{"level":3,"title":"常见的输出语句","slug":"常见的输出语句","link":"#常见的输出语句","children":[]},{"level":3,"title":"声明变量的几种方式","slug":"声明变量的几种方式","link":"#声明变量的几种方式","children":[]},{"level":3,"title":"js 命名规则","slug":"js-命名规则","link":"#js-命名规则","children":[]},{"level":3,"title":"创建元素的方式","slug":"创建元素的方式","link":"#创建元素的方式","children":[]},{"level":3,"title":"介绍 js 有哪些内置对象？","slug":"介绍-js-有哪些内置对象","link":"#介绍-js-有哪些内置对象","children":[]},{"level":3,"title":"JavaScript 变量提升","slug":"javascript-变量提升","link":"#javascript-变量提升","children":[]},{"level":3,"title":"递归函数","slug":"递归函数","link":"#递归函数","children":[]},{"level":3,"title":"浅拷贝和深拷贝","slug":"浅拷贝和深拷贝","link":"#浅拷贝和深拷贝","children":[]},{"level":3,"title":"页面传参出现过乱码如何解决","slug":"页面传参出现过乱码如何解决","link":"#页面传参出现过乱码如何解决","children":[]},{"level":3,"title":"对象和数组遍历的方法","slug":"对象和数组遍历的方法","link":"#对象和数组遍历的方法","children":[]},{"level":3,"title":"传参序列化","slug":"传参序列化","link":"#传参序列化","children":[]},{"level":3,"title":"什么是 DOM 和 BOM？","slug":"什么是-dom-和-bom","link":"#什么是-dom-和-bom","children":[]},{"level":3,"title":"new 操作符的实现原理","slug":"new-操作符的实现原理","link":"#new-操作符的实现原理","children":[]},{"level":3,"title":"JavaScript 脚本延迟加载的方式","slug":"javascript-脚本延迟加载的方式","link":"#javascript-脚本延迟加载的方式","children":[]},{"level":3,"title":"JavaScript 类数组对象的定义？","slug":"javascript-类数组对象的定义","link":"#javascript-类数组对象的定义","children":[]},{"level":3,"title":"for...in 和 for...of 的区别","slug":"for-in-和-for-of-的区别","link":"#for-in-和-for-of-的区别","children":[]},{"level":3,"title":"如何使用 for...of 遍历普通对象","slug":"如何使用-for-of-遍历普通对象","link":"#如何使用-for-of-遍历普通对象","children":[]},{"level":3,"title":"如何跳出 forEach 循环","slug":"如何跳出-foreach-循环","link":"#如何跳出-foreach-循环","children":[]},{"level":3,"title":"Object 和 Map 和 WeakMap的区别","slug":"object-和-map-和-weakmap的区别","link":"#object-和-map-和-weakmap的区别","children":[]},{"level":3,"title":"对AJAX的理解，实现一个AJAX请求","slug":"对ajax的理解-实现一个ajax请求","link":"#对ajax的理解-实现一个ajax请求","children":[]},{"level":3,"title":"ajax、axios、fetch 的区别","slug":"ajax、axios、fetch-的区别","link":"#ajax、axios、fetch-的区别","children":[]},{"level":3,"title":"对 JSON 的理解","slug":"对-json-的理解","link":"#对-json-的理解","children":[]},{"level":3,"title":"常用的正则表达式有哪些","slug":"常用的正则表达式有哪些","link":"#常用的正则表达式有哪些","children":[]},{"level":3,"title":"use strict 是什么意思","slug":"use-strict-是什么意思","link":"#use-strict-是什么意思","children":[]},{"level":3,"title":"强类型语言和弱类型语言的区别","slug":"强类型语言和弱类型语言的区别","link":"#强类型语言和弱类型语言的区别","children":[]},{"level":3,"title":"解释性语言和编译型语言的区别","slug":"解释性语言和编译型语言的区别","link":"#解释性语言和编译型语言的区别","children":[]},{"level":3,"title":"JS对URL进行编码有哪些方式","slug":"js对url进行编码有哪些方式","link":"#js对url进行编码有哪些方式","children":[]},{"level":3,"title":"base64编码方式","slug":"base64编码方式","link":"#base64编码方式","children":[]},{"level":3,"title":"encodeURIComponent和btoa的区别","slug":"encodeuricomponent和btoa的区别","link":"#encodeuricomponent和btoa的区别","children":[]},{"level":3,"title":"File Blob FileReader ArrayBuffer Base64","slug":"file-blob-filereader-arraybuffer-base64","link":"#file-blob-filereader-arraybuffer-base64","children":[]}]},{"level":2,"title":"三、原型与原型链","slug":"三、原型与原型链","link":"#三、原型与原型链","children":[{"level":3,"title":"对原型、原型链的理解","slug":"对原型、原型链的理解","link":"#对原型、原型链的理解","children":[]},{"level":3,"title":"原型修改、重写","slug":"原型修改、重写","link":"#原型修改、重写","children":[]},{"level":3,"title":"原型链指向","slug":"原型链指向","link":"#原型链指向","children":[]}]},{"level":2,"title":"四、执行上下文/作用域链/闭包","slug":"四、执行上下文-作用域链-闭包","link":"#四、执行上下文-作用域链-闭包","children":[{"level":3,"title":"对闭包的理解","slug":"对闭包的理解","link":"#对闭包的理解","children":[]},{"level":3,"title":"执行上下文","slug":"执行上下文","link":"#执行上下文","children":[]},{"level":3,"title":"对作用域、作用域链的理解","slug":"对作用域、作用域链的理解","link":"#对作用域、作用域链的理解","children":[]},{"level":3,"title":"对 this 对象的理解","slug":"对-this-对象的理解","link":"#对-this-对象的理解","children":[]},{"level":3,"title":"call、apply、bind的区别","slug":"call、apply、bind的区别","link":"#call、apply、bind的区别","children":[]}]},{"level":2,"title":"五、面向对象","slug":"五、面向对象","link":"#五、面向对象","children":[{"level":3,"title":"对象创建的方式有哪些？","slug":"对象创建的方式有哪些","link":"#对象创建的方式有哪些","children":[]},{"level":3,"title":"对象继承的方式有哪些","slug":"对象继承的方式有哪些","link":"#对象继承的方式有哪些","children":[]}]}],"git":{"updatedTime":1715872146000,"contributors":[{"name":"zqy","email":"1324980809@qq.com","commits":4}]},"filePathRelative":"js/index.md"}');export{_ as comp,S as data};
