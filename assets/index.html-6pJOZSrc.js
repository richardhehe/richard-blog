import{_ as c,r as l,o as i,c as u,a as n,b as s,d as o,t,e}from"./app-e94K_zRz.js";const r="/richard_blog/assets/gengxin1-Br6Bcvq9.png",d={},k=n("h2",{id:"非兼容性改变",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#非兼容性改变"},[n("span",null,"非兼容性改变")])],-1),v={href:"https://v3-migration.vuejs.org/zh/breaking-changes/",target:"_blank",rel:"noopener noreferrer"},m=e('<h2 id="为什么要升级-vue3" tabindex="-1"><a class="header-anchor" href="#为什么要升级-vue3"><span>为什么要升级 Vue3</span></a></h2><ul><li><code>代码维护问题</code>： options Api 新增或者修改一个需求，需要分别在 data，methods，computed 里修改，当应用变大之后，造成代码以维护</li><li><code>逻辑复用问题</code>： options Api 通过 Mixins 复用逻辑代码，容易发生命名冲突的问题，且不清楚暴露出来的变量的作用</li><li><code>响应式处理问题</code>： defineProperty 只能劫持对象的属性，对于新增的属性，还要再次手动劫持，监听数组的缺陷</li></ul><p>Vue3.x 就推出了 Composition API 主要就是为了解决<code>代码维护</code>和<code>逻辑复用</code>问题，将零散分布的逻辑组合在一起来维护。并使用<code>proxy</code>解决响应式的问题</p><h2 id="vue-3-0-新特性" tabindex="-1"><a class="header-anchor" href="#vue-3-0-新特性"><span>Vue 3.0 新特性</span></a></h2>',4),b={href:"https://juejin.cn/post/7098575243240800286",target:"_blank",rel:"noopener noreferrer"},g=e('<p><img src="'+r+'" alt="image.png"></p><ul><li>Performance：性能比 vue2.x 块 1.2 ～ 2 倍</li><li>Tree shaking support：支持按需编译，体积更小</li><li>Composition API：组合 API，类似 React Hooks</li><li>Custom Renderer API：暴露了自定义渲染 API</li><li>Fragment，Teleport（Protal），Suspense：新增三个组件</li><li>源码优化: 使用<code>monorepo</code>和<code>TypeScript</code>管理和开发源码，提升自身代码可维护性</li></ul><h3 id="源码优化" tabindex="-1"><a class="header-anchor" href="#源码优化"><span>源码优化</span></a></h3><p><strong>Monorepo 管理源码</strong></p>',4),h={href:"https://juejin.cn/post/6943869666381004836#heading-1",target:"_blank",rel:"noopener noreferrer"},f=e(`<p><code>Monorepo</code> 是工程项目的一种管理方式, 它将关联性较强的项目或者软件包放在一个 <code>repository</code> 中共同管理。vue3的源码<code>packages</code>下的每个目录都是独立的一个项目，他们都通过这个共同的仓库进行统一管理。而我们平时多项目的的管理方式是将每一个项目都单独设置一个 <code>git repository</code>，这种方式也被称为<code>multirepo</code></p><blockquote><p>优点</p></blockquote><p><strong>统一的依赖管理</strong></p><p>所有相关的模块和库都位于同一个代码库中，可以统一管理它们的依赖关系。可以借助工具很方便的进行统一的依赖升级，在前端开发中也不用安装多次 node_modules，大大减少了磁盘占用空间和安装时间</p><p><strong>更方便共享和复用代码</strong></p><p>在 monorepo 模式下，如果在开发过程中想抽取可复用的代码，只需要抽离公共代码到shared-utils模块中。而对于 multirepo 来说，跨项目的公共代码实现是比较麻烦的，虽然可以通过发布包安装依赖的方式解决这个问题，但是始终没有 monorepo 来的方便</p><p><strong>可以统一构建和发布</strong></p><p>相比于单独维护多个独立的仓库，Monorepo可以提供一个统一的构建系统，使得构建、测试和部署变得更加一致。并且模块之间是独立的，用户如果只想使用 Vue3.x 的响应式能力，可单独依赖<code>reactivity</code>这个响应式库而不用去依赖整个 Vue，减小了引用包的体积大小。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 2.x的源码目录</span>
├── src<span class="token operator">/</span>                   <span class="token comment">// 源代码目录</span>
│   ├── compiler<span class="token operator">/</span>          <span class="token comment">// 编译器相关的代码</span>
│   ├── core<span class="token operator">/</span>              <span class="token comment">// Vue 核心代码</span>
│   ├── platforms<span class="token operator">/</span>         <span class="token comment">// 平台相关的代码</span>
│   ├── server<span class="token operator">/</span>            <span class="token comment">// 服务端渲染相关的代码</span>
│   ├── sfc<span class="token operator">/</span>               <span class="token comment">// 单文件组件解析相关的代码</span>
│   ├── shared<span class="token operator">/</span>            <span class="token comment">// 共享的工具函数和常量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 3.x源码目录</span>
├── packages<span class="token operator">/</span>              <span class="token comment">// Vue 相关的核心包和插件</span>
│   ├── compiler<span class="token operator">-</span>core<span class="token operator">/</span>     <span class="token comment">// 编译器核心相关的代码</span>
│   ├── compiler<span class="token operator">-</span>dom<span class="token operator">/</span>      <span class="token comment">// 编译器与 DOM 相关的代码</span>
│   ├── compiler<span class="token operator">-</span>sfc<span class="token operator">/</span>      <span class="token comment">// 编译器与单文件相关的代码</span>
│   ├── compiler<span class="token operator">-</span>ssr<span class="token operator">/</span>      <span class="token comment">// 编译器与服务端渲染相关的代码</span>
│   ├── reactivity<span class="token operator">/</span>        <span class="token comment">// 响应式系统相关的代码</span>
│   ├── runtime<span class="token operator">-</span>core<span class="token operator">/</span>      <span class="token comment">// 运行时核心相关的代码</span>
│   ├── runtime<span class="token operator">-</span>dom<span class="token operator">/</span>       <span class="token comment">// 运行时与 DOM 相关的代码</span>
│   ├── server<span class="token operator">-</span>renderer<span class="token operator">/</span>   <span class="token comment">// 服务端渲染相关的代码</span>
│   ├── shared<span class="token operator">/</span>            <span class="token comment">// 共享的工具函数和常量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TypeScript 支持</strong></p><p>Vue2 使用<code>Flow</code>进行静态类型检查，但是对复杂场景类型的检查，支持并不好。Vue 3 使用 TypeScript，内置了更多的类型声明，使得在使用 TypeScript 时的开发体验更好。Vue 3 的源码也完全使用 TypeScript 编写，这使得开发者能够更好地使用 TypeScript 进行 Vue 3 的开发。</p><ul><li>在编码期间帮你做类型检查</li><li>避免一些因类型问题导致的错误</li><li>有利于它去定义接口的类型，利于 IDE 对变量类型的推导</li></ul><h3 id="composition-api" tabindex="-1"><a class="header-anchor" href="#composition-api"><span>Composition API</span></a></h3><p>更灵活的组织代码结构：<code>Composition API</code> 允许开发者根据功能或逻辑相关性将代码组织成可复用的逻辑代码块，而不是按照<code>options API</code> 的方式分散在不同的选项（data，methods，computed，钩子函数等）中，提高了代码的可读性和可维护性</p><p>更简单的逻辑复用和组合：可以导出逻辑代码块，然后在组件中根据需要进行组合，提高代码的复用性。也就解决了options Api 通过 Mixins 复用逻辑代码，容易发生命名冲突的问题，且不清楚暴露出来的变量的作用</p><p><strong>自定义 hooks</strong></p><p>使用 Vue2.x 写了一个实现加减的例子， 这里可以将其封装成一个 hook, 我们约定这些「自定义 Hook」以 use 作为前缀，和普通的函数加以区分。 useCount.ts 实现：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> Ref<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

type CountResultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">multiple</span><span class="token operator">:</span> Ref<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">increase</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">delta<span class="token operator">?</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token function-variable function">decrease</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">delta<span class="token operator">?</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token parameter">initValue <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span><span class="token operator">:</span> CountResultProps <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>initValue<span class="token punctuation">)</span>

  <span class="token keyword">const</span> increase <span class="token operator">=</span> <span class="token punctuation">(</span>delta<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> delta <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      count<span class="token punctuation">.</span>value <span class="token operator">+=</span> delta
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      count<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> multiple <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> decrease <span class="token operator">=</span> <span class="token punctuation">(</span>delta<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> delta <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      count<span class="token punctuation">.</span>value <span class="token operator">-=</span> delta
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      count<span class="token punctuation">.</span>value <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">,</span>
    multiple<span class="token punctuation">,</span>
    increase<span class="token punctuation">,</span>
    decrease<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来看一下在组件中使用 useCount 这个 hook:</p><div class="language-vue line-numbers-mode" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>count: {{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>倍数： {{ multiple }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increase()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>加1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>decrease()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>减一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> useCount <span class="token keyword">from</span> <span class="token string">&quot;../hooks/useCount&quot;</span><span class="token punctuation">;</span>
 <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> multiple<span class="token punctuation">,</span> increase<span class="token punctuation">,</span> decrease <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            count<span class="token punctuation">,</span>
            multiple<span class="token punctuation">,</span>
            increase<span class="token punctuation">,</span>
            decrease<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开篇 Vue2.x 实现，分散在 data,method,computed 等， 如果刚接手项目，实在无法快速将 data 字段和 method 关联起来，而 Vue3 的方式可以很明确的看出，将 count 相关的逻辑聚合在一起， 看起来舒服多了， 而且 useCount 还可以扩展更多的功能。</p><h3 id="_3-个内置组件" tabindex="-1"><a class="header-anchor" href="#_3-个内置组件"><span>3 个内置组件</span></a></h3><h4 id="fragment" tabindex="-1"><a class="header-anchor" href="#fragment"><span>Fragment</span></a></h4><p>Fragment主要是添加一个抽象节点</p><p>2.x 中，vue template 只允许有一个根节点，之所以需要这样是因为vnode是一颗单根树形结构，patch方法在遍历的时候从根节点开始遍历，它要求只有一个根节点。</p><p>3.x 编译时，如果发现组件是多根的，就创建一个 Fragment 节点作为根节点，将来 patch 的时候，如果发现是一个 Fragment 节点，则直接遍历 children 创建或更新，所以该节点不会出现在 dom 树中</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="teleport" tabindex="-1"><a class="header-anchor" href="#teleport"><span>Teleport</span></a></h4><p>背景：使用position：fixed定位的时候不一定会定位准确，比如存在滤镜filter：saturate（）等属性的时候</p><p>Teleport 组件的作用主要将组件的内容渲染到DOM树中的任意位置，Teleport 其实就是 React 中的 Portal</p><p>我们可以使用 <code>teleport</code>  组件，通过 <code>to</code>  属性，将弹出框、tooltip 等组件渲染的位置与<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>  同级，也就是在  <code>body</code> 下。这在处理弹出框、模态框等场景时非常有用。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>body<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ModalComponent</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="suspense" tabindex="-1"><a class="header-anchor" href="#suspense"><span>Suspense</span></a></h4><p>Suspense的主要作用是优化组件的加载体验，可以使用它在页面在加载过程中展示一个加载中状态，避免出现空白或加载闪烁的情况。</p><p>使用<code>&lt;Suspense&gt;</code>标签将要异步加载的组件包裹起来，通过v-slot指令分别设置了默认插槽和回退插槽。在回退插槽中，你可以自定义展示的回退内容，例如显示一个加载中的提示。</p><p><code>&lt;Suspense&gt;</code> 接受两个插槽：#default 和 #fallback。它将在内存中渲染默认插槽的同时展示后备插槽内容。</p><p>Suspense还在实验性中，后期随时可能变化</p><p>或者在 vue2.x 中使用<code>vue-async-manager</code></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- v-slot:default --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#default</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspended-component</span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--  v-slot:fallback --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#fallback</span><span class="token punctuation">&gt;</span></span> Loading... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="性能提升" tabindex="-1"><a class="header-anchor" href="#性能提升"><span>性能提升</span></a></h3><p>我分别从代码、编译、打包三方面介绍 vue3 性能方面的提升</p><ul><li>代码层面性能优化主要体现在全新响应式 APl，基于 Proxy 实现，提供了更高效和灵活的数据劫持机制，减少了属性访问的性能开销。</li><li>编译层面做了更多编译优化处理，比如静态提升、动态内容标记、事件缓存，区块等，可以有效跳过大量 dif 过程</li><li>打包时更好的支持 tree-shaking，因此整体体积更小，加载更快</li></ul><h2 id="性能提升方面" tabindex="-1"><a class="header-anchor" href="#性能提升方面"><span>性能提升方面</span></a></h2><h3 id="构建包体积优化" tabindex="-1"><a class="header-anchor" href="#构建包体积优化"><span>构建包体积优化</span></a></h3><p><strong>去除不常用的 api</strong></p><p>去除了一些不常用的特性如：<code>filter</code>、<code>$children</code>、<code>Vue.extends</code>等，减小了库的体积。</p><p><strong>优化 tree-shaking</strong></p><p>Tree shaking（摇树） 是一种优化技术，用于减小构建包的体积大小。它依赖 ESM 的静态结构，通过编译阶段的静态分析，这样就可以识别并移除项目中未使用的模块、函数和变量</p><p>Vue3.x 中的核心 API 都支持 tree-shaking，这些 API 都是通过引包的方式而不是vue2中直接在实例化时就注入，只会对使用到的功能或特性进行打包（按需打包），这意味着更多的功能和更小的体积。</p><p>实现 Tree-Shaking 条件，模块必须是 ESM(ES Module)，因为它依赖 ESM 的静态结构。因为 rollup 而普及，不过现在无论是 rollup 还是 webpack 都已经支持此功能</p><h3 id="响应式机制优化" tabindex="-1"><a class="header-anchor" href="#响应式机制优化"><span>响应式机制优化</span></a></h3>`,52),y={href:"https://www.bilibili.com/video/BV17G41157E6/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},w=e(`<p><strong>2.x 响应式机制的缺陷</strong></p><ol><li>Object.defineProperty 只能劫持对象属性，需要遍历对象的每一个属性，如果属性值也是对象，就需要递归进行深度遍历，性能消耗高</li><li>Object.defineProperty 对新增/删除属性是无法监听的，所以vue2中需要使⽤ <code>$set /$delete</code> 方法，在底层进行响应式处理，并触发更新</li><li>数组索引和 length 属性的修改无法触发更新的，Object.defineProperty处理数组非常消耗性能，所以数组还要使用函数劫持的方式来实现数据劫持的</li></ol><p><strong>3.x 响应式机制</strong></p><ol><li>不需要初始化的时候遍历每一个属性，减小了初始化性能消耗</li><li>可以监听到动态新增的属性、删除的属性、还可以监听数字索引的修改和 length 属性的修改</li><li>Proxy 并不能监听到内部深层次的对象变化，因此 Vue3.0 的处理方式是在 getter 中去递归进行代理，这样的好处是真正访问到的内部对象才会变成响应式，而不是无脑递归。这样也在很大程度上提升了性能</li></ol><ul><li>数据劫持</li></ul><p>使用 <code>proxy</code> 创建一个代理对象，对代理对象进行操作。当访问代理对象属性时触发代理对象的<code>getter</code>，在 getter 中收集依赖(副作用函数)，然后通过<code>key</code>返回源对象的属性值。当修改代理对象的属性时，触发<code>setter</code>，在<code>setter</code>中触发依赖更新，再修改源对象的值</p><ul><li>依赖收集<code>track</code></li></ul><ol><li>先通过<code>effect</code>函数注册副作用函数，它的作用将当前的副作用函数用全局变量<code>activeEffect</code>保存起来，并执行副作用函数，会访问到副作用函数中的取值操作，就会触发代理对象的<code>getter</code>，执行<code>track</code>收集依赖（当前的副作用函数），执行完毕后将全局变量清空</li><li><code>track</code>收集依赖是通过 Set 集合存储当前的副作用函数，并用<code>key</code>和<code>Set集合</code>映射 Map 表，再将这个 Map 表和 target 源对象进行弱映射<code>wekMap</code>，这样的话，不同的对象不同的 key 值就存储了与之对应的副作用函数集合，完成了依赖收集</li></ol><p><code>副作用函数</code>：如果一个函数引用了外部的资源，这个函数会受到外部资源改变的影响，我们就说这个函数存在副作用。因此，也把该函数叫做副作用函数，就是引用了数据的函数。</p><ul><li>派发更新<code>trigger</code></li></ul><ol><li>使用<code>trigger</code>函数封装了派发更新功能</li><li>当修改代理对象属性值的时候，通过<code>target</code>和<code>key</code>值拿到对应得副作用函数<code>Set</code>集合，循环执行集合中的副作用函数，完成更新</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个副作用函数桶，存放所有的副作用函数。每个元素都是一个副作用函数</span>
<span class="token comment">// 修改 [state -&gt; Map[name: Set(fn,fn), age: Set(fn, fn)], statel -&gt; Map]</span>
<span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 1 定义一个全局变量，保存当前正在执行的副作用函数</span>
<span class="token keyword">let</span> activeeffect <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">function</span> <span class="token function">is0bject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>

<span class="token comment">// 收集依赖</span>
<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// activeEffect无值意味着没有执行effect函数，无法收集依赖，直接return掉</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 每个target在bucket中都是一个Map类型： key =&gt; effects</span>
  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token comment">// 第一次拦截，depsMap不存在，先创建联系</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span><span class="token punctuation">{</span>
    depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> depsMap<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 根据当前读取的key，尝试读取key的effects函数</span>
  <span class="token keyword">let</span> depSet <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>depSet<span class="token punctuation">)</span><span class="token punctuation">{</span>
    depSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> depSet<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 只有activeEffect有值时(保存的副作用函数)，才添加到桶中</span>
  depSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 触发依赖</span>
<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 从副作用函数桶中依次取出每一个元素(副作用函数)执行</span>
  <span class="token keyword">let</span> depSet <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>depset<span class="token punctuation">)</span><span class="token punctuation">{</span>
    depSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
  * 创建响应式数据
  * <span class="token keyword">@param</span> [object]:普通对象
  * <span class="token keyword">@return</span> [Proxy]:代理对象
*/</span>
<span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is0bject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 在get操作时，收集依赖</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token comment">// return target[key]</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>，
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// target[key] = value</span>
      Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 在set操作时，触发副作用重新执行</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>，
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
* 注册副作用函数
* <span class="token keyword">@param</span> [function]:需要注册的 副作用函数
*/</span>
<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 记录正在执行的副作用函数</span>
  activeEffect <span class="token operator">=</span>fn
  <span class="token comment">// 调用副作用函数</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 重置全局变量</span>
  activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 1.创建响应式对象</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xiaopang&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> state1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;xxp&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 2.注册副作用函数</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">e1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;e1执行...&#39;</span>， state<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">e2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;e2执行...&#39;</span>， state1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    state<span class="token punctuation">.</span>name <span class="token operator">=</span> &#39;xiaoming
  <span class="token punctuation">}</span>，<span class="token number">1000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译-diff优化" tabindex="-1"><a class="header-anchor" href="#编译-diff优化"><span>编译/diff优化</span></a></h3>`,15),x={href:"https://template-explorer.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},j=e(`<p>除了响应式处理部分的优化，还在耗时较多的编译和 diff 阶段进行了优化。优化方向尽可能的区分动态内容和静态内容，针对不同的内容，采用不同的优化策略。</p><p>2.x 的数据更新触发重新渲染的粒度是组件级的，所以当数据发生变化，在单个组件内部，是需要遍历该组件的整个 vnode 节点的。这时如果一个组件中只有少量动态动态节点时，其他都是静态节点，对静态节点的遍历和 diff 就是多余的性能消耗，理想状态是只对这个绑定了动态数据的节点进行比对即可，vue3.0 做到了。</p><p>3.0 通过编译阶段对静态模板的分析，编译生成了 block tree。<code>Block tree</code>是一个将模版基于动态节点指令切割的嵌套区块，每个区块内部的节点结构是固定的,每个区块只需要以一个 Array 来追踪自身包含的动态节点</p><p>借助 Blocktree，Vuejs 将 vnode 更新性能由与<code>模版整体大小相关</code>提升为与<code>动态内容的数量相关</code></p><h4 id="动态内容标记patchflag" tabindex="-1"><a class="header-anchor" href="#动态内容标记patchflag"><span>动态内容标记patchFlag</span></a></h4><p><strong>patchFlag</strong></p><p>在 Vue2 新旧 Vnode 进行 diff 比对，这种比对是全量 Vnode 比对，包括静态节点和动态节点</p><p>Vue3 在编译成 render 函数时，会在动态元素地方添加一个标记，如<code>（1 /* TEXT */表示文本内容动态绑定 ）</code>，生成的 Vnode 对象时就会带有 <code>patchFalg</code> 属性，将来执行 diff 的时候，只会对 <code>patchFalg</code> 大于 <code>1</code> 的节点进行比对，来减小性能消耗。</p><p>按照正常的思维，既然要比较两个事物是否有差异，就得看两个事物的各组成部分是否有差异，我们知道 Vnode 有标签名、类型名、事件名等各种属性名，同时还有有子节点，子节点又可能有子节点。那么要比较新旧 Vnode 的差异，就得遍历全部节点，逐个属性逐级进行比较，性能不可避免的低下。</p><p>Vue3 不仅标记某个 Vnode 是否动态，而且精准的标记具体 是哪个属性是动态的，这样在进行更新的时候只需要定向查找相应属性的状态，比如 patchflag 的值如果包含的状态是 <code>CLASS</code> 对应的值 <code>1&lt;&lt;1</code>，则直接比对新旧虚拟 Node 的 class 属性的值的变化，来减小性能消耗。</p><p>虽然对虚拟 Node 已经精准的标记了动态节点，甚至标识到了具体什么属性的维度。但是还是无法避免递归整颗 vNode 树。于是利用<code>Block</code>的机制来规避全量对 vNode 树进行递归。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//  编译为 render 的代码</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>patchFlag</code> 使用二进制进行存储，每一位存储一个信息。除了<code>HOISTED</code>和<code>BAIL</code>，其他所有的值都代表着虚拟 Node 所代表的节点是动态的</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段3</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> PatchFlags <span class="token punctuation">{</span>
  <span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">CLASS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">STYLE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token constant">PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token constant">FULL_PROPS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token constant">HYDRATE_EVENTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token constant">STABLE_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span>
  <span class="token constant">KEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span>
  <span class="token constant">UNKEYED_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span>
  <span class="token constant">NEED_PATCH</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span>
  <span class="token constant">DYNAMIC_SLOTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token constant">DEV_ROOT_FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">,</span>
  <span class="token constant">HOISTED</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">BAIL</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Block机制</strong></p><p>如何规避全量比较虚拟Node？ <code>Block机制</code>就是把这些动态的节点放到某一个独立的地方进行维护，这样新旧 <code>Vnode</code> 可以在一个地方进行比较</p><p>根节点会作为顶级block，在根节点 VNode 上添加一个属性 <code>dynamicChildren</code> ，用来收集根节点内部所有的动态节点。在执行 <code>patchElemenet</code> 函数的时候，会判断如果属性 <code>dynamicChildren</code> 有值，有值的话，则不会执行<code>patchChildren</code>函数进行比较新旧 Vnode 比对。而是执行 <code>patchBlockChildren</code> ，由于新旧 Vnode 的根节点下都有 <code>dynamicChildren</code> 属性，而且保存的动态节点的顺序是一一对应的，所以不再需要深度递归去寻找节点间的差异，而是简单的线性遍历并执行 patch 函数就完成了节点的更新。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段5</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">patchBlockChildren</span><span class="token punctuation">(</span>
    n1<span class="token punctuation">.</span>dynamicChildren<span class="token operator">!</span><span class="token punctuation">,</span>
    dynamicChildren<span class="token punctuation">,</span>
    el<span class="token punctuation">,</span>
    parentComponent<span class="token punctuation">,</span>
    parentSuspense<span class="token punctuation">,</span>
    areChildrenSVG<span class="token punctuation">,</span>
    slotScopeIds
  <span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> parentComponent <span class="token operator">&amp;&amp;</span> parentComponent<span class="token punctuation">.</span>type<span class="token punctuation">.</span>__hmrId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">traverseStaticChildren</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>optimized<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// full diff</span>
  <span class="token function">patchChildren</span><span class="token punctuation">(</span>
    n1<span class="token punctuation">,</span>
    n2<span class="token punctuation">,</span>
    el<span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    parentComponent<span class="token punctuation">,</span>
    parentSuspense<span class="token punctuation">,</span>
    areChildrenSVG<span class="token punctuation">,</span>
    slotScopeIds<span class="token punctuation">,</span>
    <span class="token boolean">false</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 代码片段6</span>
<span class="token comment">// The fast path for blocks.</span>
<span class="token keyword">const</span> <span class="token literal-property property">patchBlockChildren</span><span class="token operator">:</span> <span class="token function-variable function">PatchBlockChildrenFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token parameter">oldChildren<span class="token punctuation">,</span>
  newChildren<span class="token punctuation">,</span>
  fallbackContainer<span class="token punctuation">,</span>
  parentComponent<span class="token punctuation">,</span>
  parentSuspense<span class="token punctuation">,</span>
  isSVG<span class="token punctuation">,</span>
  slotScopeIds</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldVNode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> newVNode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// Determine the container (parent element) for the patch.</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span>
      <span class="token comment">// oldVNode may be an errored async setup() component inside Suspense</span>
      <span class="token comment">// which will not have a mounted element</span>
      oldVNode<span class="token punctuation">.</span>el <span class="token operator">&amp;&amp;</span>
      <span class="token comment">// - In the case of a Fragment, we need to provide the actual parent</span>
      <span class="token comment">// of the Fragment itself so it can move its children.</span>
      <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>type <span class="token operator">===</span> Fragment <span class="token operator">||</span>
        <span class="token comment">// - In the case of different nodes, there is going to be a replacement</span>
        <span class="token comment">// which also requires the correct parent container</span>
        <span class="token operator">!</span><span class="token function">isSameVNodeType</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> newVNode<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token comment">// - In the case of a component, it could contain anything.</span>
        oldVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> <span class="token punctuation">(</span>ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span> <span class="token operator">|</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TELEPORT</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token function">hostParentNode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token operator">!</span>
        <span class="token operator">:</span> <span class="token comment">// In other cases, the parent container is not actually used so we</span>
          <span class="token comment">// just pass the block element here to avoid a DOM parentNode call.</span>
          fallbackContainer
    <span class="token function">patch</span><span class="token punctuation">(</span>
      oldVNode<span class="token punctuation">,</span>
      newVNode<span class="token punctuation">,</span>
      container<span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      parentComponent<span class="token punctuation">,</span>
      parentSuspense<span class="token punctuation">,</span>
      isSVG<span class="token punctuation">,</span>
      slotScopeIds<span class="token punctuation">,</span>
      <span class="token boolean">true</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>block tree</strong></p><p><code>dynamicChildren</code> 能按顺序进行比较的前提条件，是要新旧 VNode 中， <code>dynamicChildren</code> 的元素必须能够一一对应，因为只有新旧Vnode是同一个元素进行调用patch依次更新才有意义，但是也会存在不一一对应的情况</p><p>当DOM结构不稳定的时候，比如我们的程序中包含了大量的v-if、v-else、v-else-if、v-for等可能改变DOM树结构的指令。比如下面的模版：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{city}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in arr<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当flag的值不同的时候，收集的动态节点个数是不相同的，就无法通过一一对应的方式进行遍历比较。</p>`,24),V=n("code",null,"<div>{{name}}</div>",-1),_=e(`<p>为了解决这个问题，<code>Block Tree</code>产生了。其实就是把那些<code>v-if</code>这类DOM结构可能发生改变的地方也作为一个<code>block</code>进行收集，这样就会得到一颗 Block 树。</p><p>这样做有以下好处：保证稳定外层 Block 能继续使用优化的更新策略，在不稳定的内层 Block 中实施降级策略，只进行全量更新比对，节省性能</p><p><strong>dynamicChildren 赋值过程</strong></p><p>只需要把有 patchFlag 的元素收集到 dynamicChildren 数组中即可，但如何确定 VNode 收集到哪一个 Block 中呢？</p><p>因为 Block 可以发生嵌套，因此要用栈存起来。openBlock 的时候初始化并推入栈，closeBlock 的时候恢复上一层的 dynamicChildren。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// block 可能会嵌套，当发生嵌套时，用栈保存上一层收集的内容</span>
<span class="token comment">// 然后 closeBlock 时恢复上一层的内容</span>
<span class="token keyword">const</span> dynamicChildrenStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">// 用于存储当前范围中的动态元素的 VNode</span>
<span class="token keyword">let</span> currentDynamicChildren <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token keyword">function</span> <span class="token function">openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    currentDynamicChildren <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    dynamicChildrenStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentDynamicChildren<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在 createBlock 中被调用</span>
<span class="token keyword">function</span> <span class="token function">closeBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
    currentDynamicChildren <span class="token operator">=</span> dynamicChildrenStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="静态节点提升" tabindex="-1"><a class="header-anchor" href="#静态节点提升"><span>静态节点提升</span></a></h4><p>Vue3 中对不参与更新的静态节点，会做静态提升。没做静态提升之前，静态节点在 render 函数内部，会被重复创建。做了静态提升后，静态节点被放置在 render 函数外，会被打上静态标记值为-1，只会被创建一次，每次render函数树执行直接引用提升了的静态节点即可。特殊标志是负整数表示永远不会用于 Diff。免去了重复的创建操作，优化内存。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> _hoisted_1 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;我是静态节点1&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> _hoisted_2 <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;我是静态节点1&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">/* HOISTED */</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">_createElementBlock</span><span class="token punctuation">(</span>
      _Fragment<span class="token punctuation">,</span>
      <span class="token keyword">null</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        _hoisted_1<span class="token punctuation">,</span>
        _hoisted_2<span class="token punctuation">,</span>
        <span class="token function">_createElementVNode</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">_withDirectives</span><span class="token punctuation">(</span>
          <span class="token function">_createElementVNode</span><span class="token punctuation">(</span>
            <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
              <span class="token string-property property">&#39;onUpdate:modelValue&#39;</span><span class="token operator">:</span> _cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">$event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>msg <span class="token operator">=</span> $event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">null</span><span class="token punctuation">,</span>
            <span class="token number">512</span> <span class="token comment">/* NEED_PATCH */</span>
          <span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token punctuation">[</span><span class="token punctuation">[</span>_vModelText<span class="token punctuation">,</span> _ctx<span class="token punctuation">.</span>msg<span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token number">64</span> <span class="token comment">/* STABLE_FRAGMENT */</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="事件监听缓存" tabindex="-1"><a class="header-anchor" href="#事件监听缓存"><span>事件监听缓存</span></a></h4><p>在Vue 3中，事件监听函数会进行缓存，以提高性能和减少不必要的函数创建。Vue 3使用了一种称为事件懒绑定（event patching）的机制来实现事件监听缓存。</p><p>事件懒绑定的基本原理是，Vue 3会为每个组件实例创建一个内部的事件跟踪器，它会缓存事件监听函数。当事件监听器首次被绑定到元素时，Vue 3会将其缓存到事件跟踪器中。当同一事件监听器再次被绑定到相同类型的元素上时，Vue 3会直接从缓存中获取监听函数，而不需要再次创建新的函数。这样可以有效地减少重复的函数创建和内存占用，特别适用于那些在组件中多次使用相同事件监听器的场景。</p><p>以下是一个示例，展示了事件监听缓存的使用：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;按钮点击事件&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，通过在模板中使用@click指令绑定事件监听器handleClick，Vue 3会对该事件监听器进行缓存。当按钮被点击时，Vue 3会直接从缓存中获取已缓存的事件监听器函数，而不需要重新创建。</p><p>通过事件监听缓存，Vue 3能够提高事件处理的性能，并减少不必要的函数创建。这对于那些需要频繁使用相同事件监听器的场景特别有益，如列表渲染或循环组件中的事件处理。</p><h4 id="ssr-优化" tabindex="-1"><a class="header-anchor" href="#ssr-优化"><span>SSR 优化</span></a></h4><p>在 Vue2 中也有 SSR 渲染，，但是 Vue3 中的 SSR 渲染相对于 Vue2 也有了很大的性能提升。</p><p>当你在开发中使用  SSR  开发时，Vue 3.0  会将静态标签直接转化为文本，被直接 innerHtml，就不需要创建 vnode 对象，再去根据对象渲染。相比  React  先将  jsx  转化为虚拟  DOM，再将虚拟  DOM  转化为  HTML，Vue 3.0  已经赢了。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/26/172eef461b1972e1~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt="alt"></p><h2 id="新的-composition-api" tabindex="-1"><a class="header-anchor" href="#新的-composition-api"><span>新的 Composition Api</span></a></h2><h3 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>setup</span></a></h3><p><code>setup</code> 函数是组件选项中的一个新添加的函数，用于替代 <code>Vue2</code> 中的 data、methods等选项。它是组合式 API 的入口，它提供了组件的初始化逻辑、响应式数据的创建等功能</p><ul><li><p><strong>执行时机</strong>: 从生命周期的角度来看，它会在 <code>beforeCreate</code> 之前执行</p></li><li><p><strong>this指向</strong>: 在 <code>setup</code> 中你应该避免使用 <code>this</code>，因为它不会找到组件实例</p></li><li><p><strong>接收参数</strong>：</p><ul><li><code>props</code> 参数是父组件传递给子组件响应式数据；</li><li><code>context</code>参数是一个包含组件实例上下文的对象，包括attrs、slots、emit、expose等属性。例如可以通过context.attrs访问组件的非响应式属性，通过context.slots访问插槽内容，通过context.emit触发自定义事件，铜通过context.expose暴露公共 property (函数)等。</li></ul><blockquote><p>当组件没定义expose暴露内容的时候，通过ref获取到的就是组件自身的内容，也就是setup函数return的内容和props属性的内容。当定义了expose暴露内容的时候，通过ref获取到的就只是组件expose暴露内容，并且setup函数return的内容会失效，也就是会被覆盖。</p></blockquote></li></ul><p><strong>返回值</strong>：setup 返回的所有内容都暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。所以我们在模板中需要使用到的数据都需要通过setup方法return出来。</p><h3 id="单文件setup-vue3-2支持" tabindex="-1"><a class="header-anchor" href="#单文件setup-vue3-2支持"><span>单文件setup（vue3.2支持）</span></a></h3><h3 id="reactive-和-ref-的区别" tabindex="-1"><a class="header-anchor" href="#reactive-和-ref-的区别"><span>reactive 和 Ref 的区别</span></a></h3><p><strong>reactive</strong></p><ul><li><code>reactive</code> 用于处理引用类型的数据，返回响应式代理对象，操作代理对象的属性即进行访问和修改</li><li><code>reactive</code> 内部使用 <code>Proxyt</code> 代理传入对象并拦截该对象各种操作，从而实现响应式</li><li>对对象进行重新赋值会丢失响应式，不可以解构、展开运算符(...) 解构后的属性丢失响应式</li></ul><p><strong>ref</strong></p><ul><li><code>ref</code> 基础数据类型和引用数据类型都可以，返回响应式 <code>Ref</code> 对象，访问和修改值需要通过 <code>.value</code> 属性，在模板中使用会自动解包，不需要<code>.value</code></li><li><code>Ref</code> 内部封装一个 <code>Reflmpl</code> 类，使用访问器属性 <code>get/set</code> 进行数据劫持和更新，从而实现响应式</li><li>基本数据类型的值会被 <code>RefImpl</code> 直接包装，而对象和数组会被 <code>reactive</code> 转换为响应式代理，最后也会被 RefImpl 包装。</li><li>reactive中的 <code>ref</code> 不用使用 <code>.value</code>，reactive会自动解包</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">// 不用写.value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toref-和-torefs" tabindex="-1"><a class="header-anchor" href="#toref-和-torefs"><span>toRef 和 toRefs</span></a></h3><p><code>toRef</code></p><ul><li>根据一个响应式对象中的一个属性,创建一个响应式的 ref。</li><li>同时这个 <code>ref</code> 和原对象中的属性保持同步,改变原对象属性的值这个 <code>ref</code> 会跟着改变,反之改变这个 <code>ref</code> 的值原对象属性值也会改变</li><li>它接收两个参数,一个是响应式对应,另一个则是属性值,例如下面代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">addCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toRef</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token comment">// 通过访问 obj 对象中的访问器属性 value，当读取 value 值，其实是读取 obj 下的属性值，这样就可以保留对象的按引用传递，保留响应性；</span>
  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> wrapper
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>toRefs</code>它可以将一个响应式对象转成普通对象,而这个普通对象的每个属性都是响应式的 <code>ref</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span><span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>name<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token operator">~</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>age<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在经过处理后就可以进行解构赋值的操作，避免在模板中频繁使用 .value 进行访问。</p><h3 id="watch-和-watcheffect-异同" tabindex="-1"><a class="header-anchor" href="#watch-和-watcheffect-异同"><span>watch 和 watchEffect 异同</span></a></h3><ul><li>3.x 和 2.x 的<code>watch</code>一样，支持<code>immediate</code>和<code>deep</code>选项，但 3.x 不再支持<code>&#39;obj.key1.key2&#39;</code>的&quot;点分隔&quot;写法</li><li>3.x 中<code>watch</code>支持监听单个属性，也支持监听多个属性，相比 2.x 的<code>watch</code>更灵活</li></ul><p><strong>相同点</strong></p><ol><li>都是监听响应式数据的变化</li><li>都可以手动停止监听</li><li>都有清除副作用，刷新时机和调试</li></ol><p><strong>不同点</strong></p><ol><li>watch 只追监听确定义的数据源; watchEffect 会自动收集依赖（函数中用到哪些属性，就监听哪些属性）</li><li>watch 可以在回调函数中访问到新值和旧值; watchEffect 只能获取变化后的值</li><li>watch 首次不会默认自动监听，需要配置<code>immediate</code>; watchEffect 首次可以自动执行回调函类</li><li>watch 可以监听对象类型的数据; watchEffect 不行</li></ol><p>如果我们不关心响应式数据变化前后的值，只是想拿这些数据做些事情，那么<code>watchEffect</code>就是我们需要的。watch 更底层，可以接收多种数据源，包括用于依赖收集的 getter 函数，因此它完全可以实现 watchEffect 的功能，同时由于可以指定 getter 函数，依赖可以控制的更精确，还能获取数据变化前后的值，因此如果需要这些时我们会使用 watch。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stopWatch <span class="token operator">=</span> <span class="token function">watch</span><span class="token punctuation">(</span>countRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">,</span> onClear</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">onClear</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;清理函数&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> stopWatchEffect <span class="token operator">=</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onClear</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>countRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">onClear</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;清理函数&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="computed" tabindex="-1"><a class="header-anchor" href="#computed"><span>computed</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;randy1&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 接受一个 getter 函数，并根据 getter 的返回值返回一个不可变的响应式 ref 对象</span>
    <span class="token comment">// 这里的fullName1是不能修改的</span>
    <span class="token keyword">const</span> fullName1 <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user1<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user1<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁啦</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">updateUser1Name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      user1<span class="token punctuation">.</span>name <span class="token operator">+=</span> <span class="token string">&#39;!&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何给<code>computed</code>传参</p><p>闭包</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 定义一个接受参数的 computed 计算属性</span>
  <span class="token keyword">const</span> <span class="token function-variable function">makeDoubledCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">factor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> factor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 创建两个具有不同因子的计算属性</span>
  <span class="token keyword">const</span> doubledCountBy2 <span class="token operator">=</span> <span class="token function">makeDoubledCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> doubledCountBy3 <span class="token operator">=</span> <span class="token function">makeDoubledCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 提供一个方法来改变 count 的值</span>
  <span class="token keyword">const</span> <span class="token function-variable function">incrementCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="老语法变化" tabindex="-1"><a class="header-anchor" href="#老语法变化"><span>老语法变化</span></a></h2><h3 id="vue3-生命周期改动" tabindex="-1"><a class="header-anchor" href="#vue3-生命周期改动"><span>Vue3 生命周期改动</span></a></h3><ul><li>vue2相较于vue3少了renderTracked、renderTriggered两个生命周期方法。这两个钩子函数是 Vue 3 提供的调试工具，用于跟踪和记录响应式数据的访问和触发渲染的过程，以帮助开发者更好地理解组件的渲染行为。</li><li>销毁生命周期方法名也发生了变化，由beforeDestroy、destroyed变为beforeUnmount、unmounted，这样是为了更好的与beforeMount、mounted 相对应。</li><li>vue3写在setup函数中生命周期方法名就是前面多加了on。</li></ul><p>vue3虽然提倡把生命周期函数都放到setup中，但是vue2那种选项式写法还是支持的。</p><table><thead><tr><th>vue2</th><th>vue3选项式</th><th>vue3(setup)</th></tr></thead><tbody><tr><td>created</td><td>created</td><td>无</td></tr><tr><td>beforeMount</td><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestroy</td><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>destroyed</td><td>unmounted</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>无</td><td>renderTracked</td><td>onRenderTracked</td></tr><tr><td>无</td><td>renderTriggered</td><td>onRenderTriggered</td></tr><tr><td>activated</td><td>activated</td><td>onActivated</td></tr><tr><td>deactivated</td><td>deactivated</td><td>onDeactivated</td></tr></tbody></table><p><code>renderTracked</code>： 是一个渲染追踪钩子函数，它会在响应式对象被追踪时触发。</p><p><code>renderTriggered</code>： 是一个渲染触发钩子函数，它会在响应式对象导致重新渲染时触发。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token function">onRenderTracked</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onRenderTracked&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">onRenderTriggered</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onRenderTriggered&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> target<span class="token punctuation">,</span> type <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-model-的变化" tabindex="-1"><a class="header-anchor" href="#v-model-的变化"><span>v-model 的变化</span></a></h3><p>vue3 中的 v-model 将 v-model 和.sync 修饰符结合起来，去除了原来的.sync 修饰符，是 <code>:modelValue + @update：modelValue</code>的语法糖。也可以用参数的形式指定多个不同的绑定，如 v-model：name v-mdoel：age，非常强大</p><h3 id="key支持在template使用" tabindex="-1"><a class="header-anchor" href="#key支持在template使用"><span>key支持在template使用</span></a></h3><p>在vue2中，key是不能定义在template节点上的。但是在vue3中支持了。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Vue 2.x --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>heading-&#39; + item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>content-&#39; + item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- Vue 3.x --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改v-if和v-for优先级" tabindex="-1"><a class="header-anchor" href="#修改v-if和v-for优先级"><span>修改v-if和v-for优先级</span></a></h3><p>在vue2中v-for的优先级是比v-if高的，在vue3中v-if的优先级比v-for更高</p><h3 id="keep-alive-的变化" tabindex="-1"><a class="header-anchor" href="#keep-alive-的变化"><span>keep-alive 的变化</span></a></h3><p>和 vue2 不同点,vue2 直接包裹<code>&lt;router-view&gt;</code>,vue3 在路由切换时需要借助插槽实现</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>router<span class="token operator">-</span>view v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">&quot;{ Component }&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">&quot;Component&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定以指令变化" tabindex="-1"><a class="header-anchor" href="#自定以指令变化"><span>自定以指令变化</span></a></h3><p>在 Vue 3 中，主要对这些生命周期方法进行了调整</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;highlight&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对应 bind</span>
    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 对应 inserted</span>
  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 新增</span>
  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 对应 update</span>
  <span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 新增</span>
  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 对应 unbind</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件传值变化" tabindex="-1"><a class="header-anchor" href="#组件传值变化"><span>组件传值变化</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 子组件接收</span>
<span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span> setup name<span class="token operator">=</span><span class="token string">&quot;Person&quot;</span><span class="token operator">&gt;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>withDefaults<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token keyword">type</span> <span class="token class-name">Persons</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/types&#39;</span>

  <span class="token comment">// 只接收list</span>
  <span class="token comment">// defineProps([&#39;list&#39;])</span>

  <span class="token comment">// 接收list + 限制类型</span>
  <span class="token comment">// defineProps&lt;{list:Persons}&gt;()</span>

  <span class="token comment">//  接收list + 限制类型 + 限制必要性 + 指定默认值</span>
  <span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span>list<span class="token operator">?</span><span class="token operator">:</span>Persons<span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token function-variable function">list</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token string">&#39;ausydgyu01&#39;</span><span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token string">&#39;康师傅·王麻子·特仑苏&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 接收list，同时将props保存起来</span>
  <span class="token comment">/* let x = defineProps([&#39;list&#39;])
  console.log(x.list) */</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token comment">// 之前的方式</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;updateTest&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span>ctx<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;updateTest&quot;</span>，Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      handleClick
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>，
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用路由变化" tabindex="-1"><a class="header-anchor" href="#使用路由变化"><span>使用路由变化</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRoute<span class="token punctuation">,</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> router<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局-api-转移到应用对象" tabindex="-1"><a class="header-anchor" href="#全局-api-转移到应用对象"><span>全局 API 转移到应用对象</span></a></h3><p>在 Vue 2.x 中，大部分全局 API 都是通过 Vue.xxx 或者 Vue.abc() 方式调用，而在 Vue 3 中，这些方式将会改变，取而代之的是如下</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 注册插件</span>
app<span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 注册应用</span>
app<span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 卸载应用</span>
app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，可以只引入一些需要的 API，不需要的不用引入，这样也符合 Three Shaking 的要求，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> nextTick<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 Vue 3 中全局 API 都会通过 app.xxx 的方法调用，所以vue2中通过 Vue.prototype.xxx 绑定的全局方法和变量将无法使用，可以采用如下方式来代替：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span><span class="token function-variable function">http</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="根实例初始化" tabindex="-1"><a class="header-anchor" href="#根实例初始化"><span>根实例初始化</span></a></h3><p>在 Vue 2.x 中通过 new Vue() 的方法来初始化：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  store<span class="token punctuation">,</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Vue 3.x 中 Vue 不再是一个构造函数，通过 createApp 方法初始化：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>
<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新的异步组件创建方式" tabindex="-1"><a class="header-anchor" href="#新的异步组件创建方式"><span>新的异步组件创建方式</span></a></h3><p>在 Vue 2.x 中，尤其是在 Vue Router 中，会经常使用到异步组件，借助 webpack 的打包方式，可以将一个组件的代码进行异步获取，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">asyncPage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./NextPage.vue&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> asyncPage <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./NextPage.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">error</span><span class="token operator">:</span> ErrorComponent<span class="token punctuation">,</span>
  <span class="token literal-property property">loading</span><span class="token operator">:</span> LoadingComponent<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Vue 3 中，提供了 defineAsyncComponent() 方法创建异步组件，同时可以返回一个 Promise 对象来自己控制加载完成时机，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> asyncPageWithOptions <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">loader</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./NextPage.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">error</span><span class="token operator">:</span> ErrorComponent<span class="token punctuation">,</span>
  <span class="token literal-property property">loading</span><span class="token operator">:</span> LoadingComponent<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> asyncComponent <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">/* ... */</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="data-属性只支持-function" tabindex="-1"><a class="header-anchor" href="#data-属性只支持-function"><span>data 属性只支持 function</span></a></h3><p>在 Vue 2.x 中，根组件的 data 可以直接配置一个对象，子组件的 data 可以配置 function，然后返回一个对象</p><p>在 Vue 3 中，所有组件都只支持配置 function 返回一个对象的方式</p><h2 id="去除的-api" tabindex="-1"><a class="header-anchor" href="#去除的-api"><span>去除的 api</span></a></h2><h3 id="按键修饰符" tabindex="-1"><a class="header-anchor" href="#按键修饰符"><span>按键修饰符</span></a></h3><p>不再支持使用数字 (即键码) 作为 v-on 修饰符 在 Vue 2.x 中，绑定键盘事件会用到如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> keyCode version <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>input v<span class="token operator">-</span>on<span class="token operator">:</span>keyup<span class="token punctuation">.</span><span class="token number">13</span><span class="token operator">=</span><span class="token string">&quot;submit&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> alias version <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>input v<span class="token operator">-</span>on<span class="token operator">:</span>keyup<span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">&quot;submit&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在事件中，给 keyup 配置一个指定按钮的 keyCode 在 Vue 3 中将不会生效，但是依然可以使用别名</p><h3 id="on、-off-和-once-方法" tabindex="-1"><a class="header-anchor" href="#on、-off-和-once-方法"><span>$on、$off 和 $once 方法</span></a></h3><p>在 Vue2.x 中可以通过 EventBus 的方法来实现组件通信：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$EventBus <span class="token operator">=</span> EventBus
<span class="token operator">...</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种用法在 Vue 3 中就不行了，在 Vue 3 中 移除了 <code>$on</code>、<code>$off</code> 等方法（参考 rfc），事件总线模式可以被替换为使用外部的、实现了事件触发器接口的库，例如 mitt 或 tiny-emitter。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> mitt <span class="token keyword">from</span> <span class="token string">&#39;mitt&#39;</span>
<span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token function">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// listen to an event</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// fire an event</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filters" tabindex="-1"><a class="header-anchor" href="#filters"><span>filters</span></a></h3><p>移除了组件的 filters 选项，可以使用 methods 的或者 computed 来进行替代</p><h3 id="inline-template" tabindex="-1"><a class="header-anchor" href="#inline-template"><span>inline-template</span></a></h3><p>在 2.x 中，Vue 为子组件提供了 inline-template attribute，以便将其内部内容作为模板使用，而不是作为分发内容。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">inline-template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>它们将被编译为组件自己的模板，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>而不是父级所包含的内容。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="children" tabindex="-1"><a class="header-anchor" href="#children"><span>$children</span></a></h3><p>在 3.x 中，$children property 已被移除，且不再支持。如果你需要访问子组件实例，我们建议使用模板引用。</p><h2 id="pinia" tabindex="-1"><a class="header-anchor" href="#pinia"><span>Pinia</span></a></h2><ul><li>state</li><li>getters</li><li>action</li></ul><p>Pinia 是 Vue 的专属的最新状态管理库，是 Vuex 状态管理工具的替代品</p><ol><li>提供更加简单的 API(去掉了 mutation) ，组件中可直接修改store的数据，无需再提交mutation</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 组件中修改store数据</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>useCountStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/store/count&#39;</span>

<span class="token keyword">const</span> countStore <span class="token operator">=</span> <span class="token function">useCountStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 直接修改</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 第一种修改方式</span>
  countStore<span class="token punctuation">.</span>sum <span class="token operator">+=</span> <span class="token number">1</span>

  <span class="token comment">// 2. 第二种修改方式，修改多个数据</span>
  countStore<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    sum<span class="token operator">:</span> <span class="token number">222</span><span class="token punctuation">,</span>
    address<span class="token operator">:</span> <span class="token string">&#39;北京&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 3.第三种修改方式，调用对应action</span>
  countStore<span class="token punctuation">.</span><span class="token function">incrementOdd</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// Pinia</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useCountStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  actions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">//加</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//操作countStore中的sum</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> value
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> 
  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      sum<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      address<span class="token operator">:</span> <span class="token string">&#39;苏州&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>提供符合组合式风格的 API(和 Vue3 新语法统一)</li><li>去掉了 modules 的概念，每一个 store 都是一个独立的模块</li><li>搭配 TypeScript 一起使用提供可靠的类型推断</li></ol><h2 id="setup-中能不能访问到data和methods中的数据" tabindex="-1"><a class="header-anchor" href="#setup-中能不能访问到data和methods中的数据"><span>setup 中能不能访问到data和methods中的数据</span></a></h2><p>setup执行时机在beforecreate之前</p><p>在setup中是不能使用data和methods，因为还没初始化好</p><p>由于不能再setup函数中使用data和methods，所以Vue为了避免我们错误的使用，它直接将setup函数中的this修改成undefined.</p><p>setup只能同步，不能异步</p><h2 id="宏函数在vue3中不用引入直接使用" tabindex="-1"><a class="header-anchor" href="#宏函数在vue3中不用引入直接使用"><span>宏函数在vue3中不用引入直接使用</span></a></h2><ul><li>defineExpose()</li><li>defineProps()</li></ul>`,131);function C(a,S){const p=l("ExternalLinkIcon");return i(),u("div",null,[k,n("p",null,[n("a",v,[s("看迁移文档"),o(p)])]),m,n("p",null,[n("a",b,[s("新特性"),o(p)])]),g,n("p",null,[n("a",h,[s("文章"),o(p)])]),f,n("p",null,[n("a",y,[s("b站视频"),o(p)])]),w,n("p",null,[n("a",x,[s("Vue-template-explorer（Vue3 在线编译）"),o(p)])]),j,n("p",null,[s("举个例子，flag为true的时候，动态节点中包含"+t(a.name)+"所在的div和"+t(a.age)+"所在的div，而当条件发生改变后，新的虚拟Node收集的动态节点是"+t(a.city)+"所在的div，当进行遍历比较的时候，会用"+t(a.city)+"所在div对应的虚拟Node去和"+t(a.name)+"所在的div所在的虚拟Node进行比较和更新。但是"+t(a.name)+"所在div的虚拟Node的el属性是节点",1),V,s("，然而该节点已经因为条件变化而消失。所以即使对该节点进行更新，浏览器页面也不会发生任何变化。")]),_])}const q=c(d,[["render",C],["__file","index.html.vue"]]),P=JSON.parse('{"path":"/vue3/","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"非兼容性改变","slug":"非兼容性改变","link":"#非兼容性改变","children":[]},{"level":2,"title":"为什么要升级 Vue3","slug":"为什么要升级-vue3","link":"#为什么要升级-vue3","children":[]},{"level":2,"title":"Vue 3.0 新特性","slug":"vue-3-0-新特性","link":"#vue-3-0-新特性","children":[{"level":3,"title":"源码优化","slug":"源码优化","link":"#源码优化","children":[]},{"level":3,"title":"Composition API","slug":"composition-api","link":"#composition-api","children":[]},{"level":3,"title":"3 个内置组件","slug":"_3-个内置组件","link":"#_3-个内置组件","children":[]},{"level":3,"title":"性能提升","slug":"性能提升","link":"#性能提升","children":[]}]},{"level":2,"title":"性能提升方面","slug":"性能提升方面","link":"#性能提升方面","children":[{"level":3,"title":"构建包体积优化","slug":"构建包体积优化","link":"#构建包体积优化","children":[]},{"level":3,"title":"响应式机制优化","slug":"响应式机制优化","link":"#响应式机制优化","children":[]},{"level":3,"title":"编译/diff优化","slug":"编译-diff优化","link":"#编译-diff优化","children":[]}]},{"level":2,"title":"新的 Composition Api","slug":"新的-composition-api","link":"#新的-composition-api","children":[{"level":3,"title":"setup","slug":"setup","link":"#setup","children":[]},{"level":3,"title":"单文件setup（vue3.2支持）","slug":"单文件setup-vue3-2支持","link":"#单文件setup-vue3-2支持","children":[]},{"level":3,"title":"reactive 和 Ref 的区别","slug":"reactive-和-ref-的区别","link":"#reactive-和-ref-的区别","children":[]},{"level":3,"title":"toRef 和 toRefs","slug":"toref-和-torefs","link":"#toref-和-torefs","children":[]},{"level":3,"title":"watch 和 watchEffect 异同","slug":"watch-和-watcheffect-异同","link":"#watch-和-watcheffect-异同","children":[]},{"level":3,"title":"computed","slug":"computed","link":"#computed","children":[]}]},{"level":2,"title":"老语法变化","slug":"老语法变化","link":"#老语法变化","children":[{"level":3,"title":"Vue3 生命周期改动","slug":"vue3-生命周期改动","link":"#vue3-生命周期改动","children":[]},{"level":3,"title":"v-model 的变化","slug":"v-model-的变化","link":"#v-model-的变化","children":[]},{"level":3,"title":"key支持在template使用","slug":"key支持在template使用","link":"#key支持在template使用","children":[]},{"level":3,"title":"修改v-if和v-for优先级","slug":"修改v-if和v-for优先级","link":"#修改v-if和v-for优先级","children":[]},{"level":3,"title":"keep-alive 的变化","slug":"keep-alive-的变化","link":"#keep-alive-的变化","children":[]},{"level":3,"title":"自定以指令变化","slug":"自定以指令变化","link":"#自定以指令变化","children":[]},{"level":3,"title":"组件传值变化","slug":"组件传值变化","link":"#组件传值变化","children":[]},{"level":3,"title":"使用路由变化","slug":"使用路由变化","link":"#使用路由变化","children":[]},{"level":3,"title":"全局 API 转移到应用对象","slug":"全局-api-转移到应用对象","link":"#全局-api-转移到应用对象","children":[]},{"level":3,"title":"根实例初始化","slug":"根实例初始化","link":"#根实例初始化","children":[]},{"level":3,"title":"新的异步组件创建方式","slug":"新的异步组件创建方式","link":"#新的异步组件创建方式","children":[]},{"level":3,"title":"data 属性只支持 function","slug":"data-属性只支持-function","link":"#data-属性只支持-function","children":[]}]},{"level":2,"title":"去除的 api","slug":"去除的-api","link":"#去除的-api","children":[{"level":3,"title":"按键修饰符","slug":"按键修饰符","link":"#按键修饰符","children":[]},{"level":3,"title":"$on、$off 和 $once 方法","slug":"on、-off-和-once-方法","link":"#on、-off-和-once-方法","children":[]},{"level":3,"title":"filters","slug":"filters","link":"#filters","children":[]},{"level":3,"title":"inline-template","slug":"inline-template","link":"#inline-template","children":[]},{"level":3,"title":"$children","slug":"children","link":"#children","children":[]}]},{"level":2,"title":"Pinia","slug":"pinia","link":"#pinia","children":[]},{"level":2,"title":"setup 中能不能访问到data和methods中的数据","slug":"setup-中能不能访问到data和methods中的数据","link":"#setup-中能不能访问到data和methods中的数据","children":[]},{"level":2,"title":"宏函数在vue3中不用引入直接使用","slug":"宏函数在vue3中不用引入直接使用","link":"#宏函数在vue3中不用引入直接使用","children":[]}],"git":{"updatedTime":1715872146000,"contributors":[{"name":"zqy","email":"1324980809@qq.com","commits":4}]},"filePathRelative":"vue3/index.md"}');export{q as comp,P as data};
