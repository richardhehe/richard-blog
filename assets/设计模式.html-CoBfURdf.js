import{_ as t,r as e,o,c,a as n,b as a,d as p,e as l}from"./app-e94K_zRz.js";const i={},u=n("h1",{id:"设计模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#设计模式"},[n("span",null,"设计模式")])],-1),k={href:"https://mp.weixin.qq.com/s/9UNJG0MJrAsYKjQK4MAoyg",target:"_blank",rel:"noopener noreferrer"},r={href:"https://juejin.cn/post/6844904138707337229",target:"_blank",rel:"noopener noreferrer"},d=l(`<p><code>设计模式</code>设计模式是解决问题的一种思想，和语言无关。是在软件设计、开发过程中，针对特定问题、场景的更优解决方案。使用设计模式是为了<code>可复用代码、让代码更容易被他人理解、保证代码可靠性</code></p><p>在日常开发中大部分前端都在开发的中，进行组件、方法等封装、提炼的时候或多或少已经使用了一些设计模式的理念， 但是由于对设计模式的概念模糊，理解不够，从而导致设计整体架构的时候，会有各种<code>局限性，拓展性、可读性、维护性变差</code>，不得不多次重构甚至重写</p><h2 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h2><p>Vue框架使用观察者模式来实现数据响应式。Vue中的数据对象被转换成响应式对象，当数据发生变化时，相关的依赖项会被通知，视图也会相应地更新。Vue利用Object.defineProperty或Proxy来追踪数据变化并触发响应。</p><h2 id="发布-订阅模式" tabindex="-1"><a class="header-anchor" href="#发布-订阅模式"><span>发布-订阅模式</span></a></h2><p>发布-订阅模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知</p><p><code>观察者模式</code>和<code>发布-订阅模式</code>差别在于<code>有没有一个中央的事件总线</code>。如果有，我们就可以认为这是个<code>发布-订阅模式</code>。如果没有，那么就可以认为是<code>观察者模式</code>。因为其实它们都实现了一个关键的功能：<code>发布事件-订阅事件并触发事件</code>。</p><p><code>应用</code></p><ul><li>EventBus事件总线</li></ul><p><code>优点</code></p><p>时间上的解耦，对象间的解耦，既可以应用在异步编程中，也可以帮助我们完成更松耦合的代码编写。</p><p><code>什么时候使用</code></p><ul><li>各模块相互独立</li><li>存在一对多的依赖关系</li><li>依赖模块不稳定、依赖关系不稳定</li><li>各模块由不同的人员、团队开发</li></ul><h2 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h2><p>工厂模式是用来创建对象的一种最常用的设计模式。我们不暴露创建对象的具体逻辑，而是将将逻辑封装在一个函数中，那么这个函数就可以被视为一个工厂。目的是用于实现解耦，将对象的创建和使用分开。提高代码复用性。工厂模式根据抽象程度的不同可以分为：<code>简单工厂</code>，<code>工厂方法</code>和<code>抽象工厂</code>。</p><ul><li><p><strong><code>简单工厂模式</code></strong></p><p><code>应用:</code></p><ul><li>封装ajax，根据不同的type类型，匹配不同的发送请求的通用方法</li><li>vue中的watcher类，创建不同类型的watcher</li><li>虚拟节点的创建</li></ul><p><code>优点:</code> 只需要一个正确的参数，就可以获取到所需要的对象，而无需知道其创建的具体细节。</p><p><code>缺点:</code>在函数内包含了所有对象的创建逻辑（构造函数）和判断逻辑的代码，每增加新的构造函数还需要修改判断逻辑代码。当我们要创建的对象很多时，这个函数会成为一个庞大的超级函数，使得难以维护。<strong>所以，简单工厂只能适用于创建同一类型对象或者是创建的对象数量较少，创建逻辑不复杂的情况</strong>。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//User类</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token comment">//构造器</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">opt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> opt<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>viewPage <span class="token operator">=</span> opt<span class="token punctuation">.</span>viewPage<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//静态方法</span>
  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token parameter">role</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>role<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;superAdmin&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;超级管理员&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">viewPage</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;通讯录&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;发现页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;应用数据&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;权限管理&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;admin&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;管理员&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">viewPage</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;通讯录&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;发现页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;应用数据&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;user&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;普通用户&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">viewPage</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;通讯录&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;发现页&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;参数错误, 可选参数:superAdmin、admin、user&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//调用</span>
<span class="token keyword">let</span> superAdmin <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&#39;superAdmin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> admin <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> normalUser <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>工厂方法模式</code></strong></p><p>用于解决简单工厂模式存在不方便添加新的类的问题，因为添加新的类以后依然需要修改工厂函数。工厂方法模式的本意是将<strong>实际创建对象的工作推到子类</strong>中，这样核心类就变成了抽象类。我们可以使用<code>new.target</code>来模拟出抽象类。<code>new.target</code>指向直接被<code>new</code>执行的构造函数，我们对<code>new.target</code>进行判断，如果指向了该类则抛出错误来使得该类成为抽象类。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> viewPage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;抽象类不能实例化!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>viewPage <span class="token operator">=</span> viewPage<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">UserFactory</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> viewPage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> viewPage<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">role</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>role<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&#39;superAdmin&#39;</span><span class="token operator">:</span> 
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserFactory</span><span class="token punctuation">(</span> <span class="token string">&#39;超级管理员&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;通讯录&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;发现页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;应用数据&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;权限管理&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;admin&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserFactory</span><span class="token punctuation">(</span> <span class="token string">&#39;普通用户&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;通讯录&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;发现页&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&#39;user&#39;</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserFactory</span><span class="token punctuation">(</span> <span class="token string">&#39;普通用户&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;首页&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;通讯录&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;发现页&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;参数错误, 可选参数:superAdmin、admin、user&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> userFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> superAdmin <span class="token operator">=</span> userFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;superAdmin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> admin <span class="token operator">=</span> userFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> userFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>抽象工厂模式</code></p><p>围绕一个超级工厂创建其他工厂，其它的工厂继承了这个超级工厂，我们通过选择不同类型工厂，创建不同类型的对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">headPet</span> <span class="token punctuation">{</span> <span class="token comment">// 宠物总店</span>
    <span class="token function">sellpet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 出售宠物</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;出售一只宠物&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">desert</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遗弃宠物</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;遗弃一只宠物&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">operation</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&#39;sell&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sellpet</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">desert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">normalPet</span> <span class="token keyword">extends</span> <span class="token class-name">headPet</span> <span class="token punctuation">{</span> <span class="token comment">// 普通宠物分店</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">cat</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">mouse</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">fishPet</span> <span class="token keyword">extends</span> <span class="token class-name">headPet</span> <span class="token punctuation">{</span> <span class="token comment">// 水族馆分店</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">shark</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">whale</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">selectPet</span><span class="token punctuation">(</span><span class="token parameter">shop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>shop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;normal&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">normalPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token string">&#39;fish&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">fishPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;暂无此分店哦！&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> normal <span class="token operator">=</span> <span class="token function">selectPet</span><span class="token punctuation">(</span><span class="token string">&#39;normal&#39;</span><span class="token punctuation">)</span>
normal<span class="token punctuation">.</span><span class="token function">dog</span><span class="token punctuation">(</span><span class="token string">&#39;Spike&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sell&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 出售一只狗狗</span>
normal<span class="token punctuation">.</span><span class="token function">cat</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desert&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 遗弃一只病猫</span>
normal<span class="token punctuation">.</span><span class="token function">mouse</span><span class="token punctuation">(</span><span class="token string">&#39;Jerry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sell&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 出售一只小老鼠</span>

<span class="token keyword">const</span> fish <span class="token operator">=</span> <span class="token function">selectPet</span><span class="token punctuation">(</span><span class="token string">&#39;fish&#39;</span><span class="token punctuation">)</span>
fish<span class="token punctuation">.</span><span class="token function">shark</span><span class="token punctuation">(</span><span class="token string">&#39;Shark&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;desert&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 遗弃一条死鱼</span>
fish<span class="token punctuation">.</span><span class="token function">whale</span><span class="token punctuation">(</span><span class="token string">&#39;Whale&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sell&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 出售一只鲸鱼</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h2><p>如果一个类只允许创建一个对象（或者实例），并且提供一个访问它的全局访问点，那这个类就是一个单例类</p><p><code>应用：</code></p><ul><li>axios取消重复请求，对列表进行筛选，如果结果返回较慢并且此时用户频繁切换tab，就会导致<strong>多个接口一直在响应中，但前面的筛选数据已经没有意义了</strong>，如果接口不是按顺序响应，那就会导致返回数据与筛选不符合，应用到了单例模式的思想</li><li>Vue.use引用插件(比如element)，插件注册方法 install会判断如果系统存在实例就直接返回掉,不存在则创建</li><li>vuex全局状态管理</li></ul><p><code>优点：</code></p><ul><li>只有一个实例避免了重复的创建销毁占用内存</li></ul>`,29);function v(m,b){const s=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",k,[a("文章"),p(s)]),n("a",r,[a("文章"),p(s)])]),d])}const y=t(i,[["render",v],["__file","设计模式.html.vue"]]),g=JSON.parse('{"path":"/js/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"发布-订阅模式","slug":"发布-订阅模式","link":"#发布-订阅模式","children":[]},{"level":2,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]}],"git":{"updatedTime":1711422640000,"contributors":[{"name":"zqy","email":"1324980809@qq.com","commits":1}]},"filePathRelative":"js/设计模式.md"}');export{y as comp,g as data};
