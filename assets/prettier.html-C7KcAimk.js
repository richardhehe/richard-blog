import{_ as n,o as s,c as e,e as a}from"./app-e94K_zRz.js";const t={},p=a(`<h1 id="prettier" tabindex="-1"><a class="header-anchor" href="#prettier"><span>prettier</span></a></h1><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p><code>pnpm i prettier -D</code>安装之后，工程目录下新建<code>.prettierrc.js</code>配置文件以及<code>.prettierignore</code>忽略文件，这样就相当于告诉我们的工程我们使用了<code>prettier</code>，之后执行<code>prettier</code>格式化命令时即按照配置进行格式化，如<code>npx prettier. --write</code>格式化所有文件。</p><p><code>prettier</code> 隐式忽略<code>node_modules</code>，并不需要将其添加到<code>.prettierignore</code>中</p><h2 id="prettierrc-js" tabindex="-1"><a class="header-anchor" href="#prettierrc-js"><span>.prettierrc.js</span></a></h2><p>配置就比较简单直观了，都是一条一条具体的格式化规则，如下配置中基本都是默认值：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//此处的规则供参考，其中多半其实都是默认值，可以根据个人习惯改写</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  printWidth<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token comment">//单行长度</span>
  tabWidth<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//缩进长度</span>
  useTabs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//使用空格代替tab缩进</span>
  semi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//句末使用分号</span>
  singleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//使用单引号</span>
  quoteProps<span class="token operator">:</span> <span class="token string">&#39;as-needed&#39;</span><span class="token punctuation">,</span> <span class="token comment">//仅在必需时为对象的key添加引号</span>
  jsxSingleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// jsx中使用单引号</span>
  trailingComma<span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span> <span class="token comment">//多行时尽可能打印尾随逗号</span>
  bracketSpacing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//在对象前后添加空格-eg: { foo: bar }</span>
  jsxBracketSameLine<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//多属性html标签的‘&gt;’折行放置</span>
  arrowParens<span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span> <span class="token comment">//单参数箭头函数参数周围使用圆括号-eg: (x) =&gt; x</span>
  requirePragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//无需顶部注释即可格式化</span>
  insertPragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//在已被preitter格式化的文件顶部加上标注</span>
  proseWrap<span class="token operator">:</span> <span class="token string">&#39;preserve&#39;</span><span class="token punctuation">,</span> <span class="token comment">//不知道怎么翻译</span>
  htmlWhitespaceSensitivity<span class="token operator">:</span> <span class="token string">&#39;ignore&#39;</span><span class="token punctuation">,</span> <span class="token comment">//对HTML全局空白不敏感</span>
  vueIndentScriptAndStyle<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不对vue中的script及style标签缩进</span>
  endOfLine<span class="token operator">:</span> <span class="token string">&#39;lf&#39;</span><span class="token punctuation">,</span> <span class="token comment">//结束行形式</span>
  embeddedLanguageFormatting<span class="token operator">:</span> <span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span> <span class="token comment">//对引用代码进行格式化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vscode中的使用" tabindex="-1"><a class="header-anchor" href="#vscode中的使用"><span>vscode中的使用</span></a></h2><p>安装prettier的vscode插件，安装之后我们可以右键需要进行格式化的文件然后选择prettier进行格式化。</p><p>自动化：</p><p>ctrl + shift + p打开搜索栏搜索settings.json配置文件，项目内生成.vscode文件夹，在其下的settings.json中新增配置：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
 <span class="token comment">// 设置全部语言的默认格式化程序为prettier</span>
 <span class="token property">&quot;editor.defaultFormatter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esbenp.prettier-vscode&quot;</span><span class="token punctuation">,</span>
 <span class="token comment">// 设置特定语言的默认格式化程序为prettier</span>
 <span class="token comment">//   &quot;[javascript]&quot;: {</span>
 <span class="token comment">//     &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span>
 <span class="token comment">//   },</span>
 <span class="token comment">// 设置全部语言在保存时自动格式化</span>
 <span class="token property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
 <span class="token comment">// 设置特定语言在保存时自动格式化</span>
 <span class="token comment">//   &quot;[javascript]&quot;: {</span>
 <span class="token comment">//     &quot;editor.formatOnSave&quot;: true</span>
 <span class="token comment">//   }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eslint-prettier" tabindex="-1"><a class="header-anchor" href="#eslint-prettier"><span>eslint &amp;&amp; prettier</span></a></h2><h3 id="解决eslint与prettier在代码格式上的冲突" tabindex="-1"><a class="header-anchor" href="#解决eslint与prettier在代码格式上的冲突"><span>解决eslint与prettier在代码格式上的冲突</span></a></h3><p>因为eslint本身也具备对代码格式的控制与检查能力，所以不可避免可能会与prettier的代码格式冲突，比如eslint配置rules中对缩进的要求为2并在不满足时报错，</p><p><code>.eslint.cjs：</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    indent<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>.prettierrc.cjs：</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
      tabWidth<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">//缩进长度</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们在执行npx prettier . --write后进行eslint代码检查eslint .就会把所有缩进问题进行报错，检查不通过。</p><p>解决方案很简单——思路就是把prettier的规则复写进eslint中，并对原本eslint中的格式配置进行覆盖，这样就做到了eslint的格式化检查与prettier的格式化行为统一。</p><p>用社区的轮子即可：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> eslint-config-prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在 .eslintrc.* 文件里面的 extends 字段最后添加一行：</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span><span class="token punctuation">,</span>
    <span class="token string">&quot;已经配置的规则&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>   <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>extends的值为数组，后面的数组项会继承和覆盖前面的配置，所以完成了prettier规则对eslint规则的扩充和覆盖。</p><h3 id="省略prettier格式化命令-eslint进行格式化与检查一步到位" tabindex="-1"><a class="header-anchor" href="#省略prettier格式化命令-eslint进行格式化与检查一步到位"><span>省略prettier格式化命令，eslint进行格式化与检查一步到位</span></a></h3><p>完成上述操作本质是做到了 ESLint 会按照 Prettier 的规则做相关校验，也就是说先执行Prettier格式化后再执行eslint检查不会因为格式问题冲突而报错，但是还是需要运行 Prettier 命令来进行格式化。为了避免多此一举，社区也提供了整合上面两步的方案：在使用 eslint --fix（eslint错误修复） 时候，实际使用 Prettier 来替代 ESLint 的格式化功能。操作如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装eslint-plugin-prettier</span>
<span class="token function">pnpm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> eslint-plugin-prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在 .eslintrc.* 文件里面的 extends 字段最后再添加一行：</span>
<span class="token punctuation">{</span>
  <span class="token string">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token operator">...</span><span class="token punctuation">,</span>
    <span class="token string">&quot;已经配置的规则&quot;</span><span class="token punctuation">,</span>
<span class="token operator">+</span>   <span class="token string">&quot;plugin:prettier/recommended&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token operator">+</span>   <span class="token string">&quot;prettier/prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候运行 <code>eslint --fix</code> 实际使用的是 <code>Prettier</code> 去格式化文件。在<code>rules</code>中添加<code>&quot;prettier/prettier&quot;: &quot;error&quot;</code>，用意是编写代码时不符合<code>prettier</code>格式规范的编码<code>eslint</code>直接自动报错（结合vscode的eslint插件实时报错的能力）。 当然直接执行<code>eslint --fix</code>会没有反应，原因是<code>eslint</code>命令缺少目标文件，可以用<code>--ext [文件拓展名,[文件拓展名]]</code>的形式指定需要进行eslint修复以及检查的文件，比如react + ts项目中：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>eslint <span class="token builtin class-name">.</span> <span class="token parameter variable">--fix</span> <span class="token parameter variable">--ext</span> ts,tsx --report-unused-disable-directives --max-warnings <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示进行eslint检查的同时进行自动修复（--fix），针对的文件是以ts、tsx为拓展名的（--ext ts,tsx），还有一些错误打印相关的要求（--report-unused-disable-directives），代码执行不退出的可以容忍的警告数量为0。</p><h3 id="覆盖vscode本地格式化配置-代码格式层面协作统一" tabindex="-1"><a class="header-anchor" href="#覆盖vscode本地格式化配置-代码格式层面协作统一"><span>覆盖vscode本地格式化配置（代码格式层面协作统一）</span></a></h3><p>由于每个人本地的 <code>VS Code</code> 代码格式化配置不拘一格，在实际的项目开发中，多多少少会因为格式化问题产生争议。因此需要有一个统一的规范覆盖本地配置，<code>editorconfig for vs code</code>承担起了这个作用，只要在项目工程的根目录文件夹下添加<code>.editorconfig</code>文件，那么这个文件声明的代码规范规则能覆盖编辑器默认的代码规范规则，从而实现统一的规范标准。</p><p>一般我们都用prettier进行代码格式化，在vscode中Prettier读取配置的优先级即：</p><p>Prettier 配置文件，比如<code>.prettierrc</code> 、<code>.prettier.config.js</code>。 <code>.editorconfig</code>文件，用于覆盖用户/工作区设置。</p><p>.editorconfig举例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>root <span class="token operator">=</span> <span class="token boolean">true</span>                         <span class="token comment"># 根目录的配置文件，编辑器会由当前目录向上查找，如果找到 \`roor = true\` 的文件，则不再查找</span>
​
<span class="token punctuation">[</span>*<span class="token punctuation">]</span>
indent_style <span class="token operator">=</span> space                <span class="token comment"># 空格缩进,可选&quot;space&quot;、&quot;tab&quot;</span>
indent_size <span class="token operator">=</span> <span class="token number">4</span>                     <span class="token comment"># 缩进空格为4个</span>
end_of_line <span class="token operator">=</span> lf                    <span class="token comment"># 结尾换行符，可选&quot;lf&quot;、&quot;cr&quot;、&quot;crlf&quot;</span>
charset <span class="token operator">=</span> utf-8                     <span class="token comment"># 文件编码是 utf-8</span>
trim_trailing_whitespace <span class="token operator">=</span> <span class="token boolean">true</span>     <span class="token comment"># 不保留行末的空格</span>
insert_final_newline <span class="token operator">=</span> <span class="token boolean">true</span>         <span class="token comment"># 文件末尾添加一个空行</span>
curly_bracket_next_line <span class="token operator">=</span> <span class="token boolean">false</span>     <span class="token comment"># 大括号不另起一行</span>
spaces_around_operators <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token comment"># 运算符两遍都有空格</span>
indent_brace_style <span class="token operator">=</span> 1tbs           <span class="token comment"># 条件语句格式是 1tbs</span>
​
<span class="token punctuation">[</span>*.js<span class="token punctuation">]</span>                              <span class="token comment"># 对所有的 js 文件生效</span>
quote_type <span class="token operator">=</span> single                 <span class="token comment"># 字符串使用单引号</span>
​
<span class="token punctuation">[</span>*.<span class="token punctuation">{</span>html,less,css,json<span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token comment"># 对所有 html, less, css, json 文件生效</span>
quote_type <span class="token operator">=</span> double                 <span class="token comment"># 字符串使用双引号</span>
​
<span class="token punctuation">[</span>package.json<span class="token punctuation">]</span>                      <span class="token comment"># 对 package.json 生效</span>
indent_size <span class="token operator">=</span> <span class="token number">4</span>                   <span class="token comment"># 使用2个空格缩进</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),i=[p];function o(l,c){return s(),e("div",null,i)}const d=n(t,[["render",o],["__file","prettier.html.vue"]]),u=JSON.parse('{"path":"/engineering/standard/prettier.html","title":"prettier","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":".prettierrc.js","slug":"prettierrc-js","link":"#prettierrc-js","children":[]},{"level":2,"title":"vscode中的使用","slug":"vscode中的使用","link":"#vscode中的使用","children":[]},{"level":2,"title":"eslint && prettier","slug":"eslint-prettier","link":"#eslint-prettier","children":[{"level":3,"title":"解决eslint与prettier在代码格式上的冲突","slug":"解决eslint与prettier在代码格式上的冲突","link":"#解决eslint与prettier在代码格式上的冲突","children":[]},{"level":3,"title":"省略prettier格式化命令，eslint进行格式化与检查一步到位","slug":"省略prettier格式化命令-eslint进行格式化与检查一步到位","link":"#省略prettier格式化命令-eslint进行格式化与检查一步到位","children":[]},{"level":3,"title":"覆盖vscode本地格式化配置（代码格式层面协作统一）","slug":"覆盖vscode本地格式化配置-代码格式层面协作统一","link":"#覆盖vscode本地格式化配置-代码格式层面协作统一","children":[]}]}],"git":{"updatedTime":1712455531000,"contributors":[{"name":"zqy","email":"1324980809@qq.com","commits":1}]},"filePathRelative":"engineering/standard/prettier.md"}');export{d as comp,u as data};
