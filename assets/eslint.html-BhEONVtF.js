import{_ as s,o as n,c as a,e}from"./app-e94K_zRz.js";const t={},p=e(`<h1 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint"><span>eslint</span></a></h1><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p>eslint本质就是一个内置有解析器的工具，它可以将项目代码解析成AST，然后根据AST抽象语法树分析出代码里存在的问题然后给出警告或者报错。eslint的初衷就是在代码编写阶段尽早得发现存在的错误；除了语法检查外，eslint也具有一定的代码格式化能力，但是不是其能力的重心（prettier在代码格式方面更加专业）</p><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>如果使用脚手架初始化项目，比如通过vite创建项目：pnpm create vite这样得到的项目模板都对eslint进行了初始化配置。</p><p>如果手动给项目配置eslint检查：</p><div class="language-Shell line-numbers-mode" data-ext="Shell" data-title="Shell"><pre class="language-Shell"><code># 全局安装eslint依赖
npm i eslint -g
​
# 给项目初始化eslint，包括安装devDependencies依赖 &amp; 生成配置
eslint --init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过问答之后生成eslint的配置文件.eslintrc.cjs</p><h2 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项"><span>配置项</span></a></h2><h3 id="parser-parseroptions" tabindex="-1"><a class="header-anchor" href="#parser-parseroptions"><span>parser &amp; parserOptions</span></a></h3><p>本身eslint的语法检查就是一个先对代码进行静态解析得到AST，然后再判断的过程。所以在eslint默认的解析器基础上，自然需要一些更高级的解析器来支持更新的语法以及语言，比如eslint的默认解析器是Espree，它只支持对es5的js进行解析，所以我们如果项目中使用了ts，Espree就不行了，自然需要用到更高级的（支持ts以及最新es版本的）解析器@typescript-eslint/parser。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 使用@typescript-eslint/parser这个解析器进行语法解析</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过parser我们指定了项目所使用的语法解析器，parserOptions就相当于给出解析器更详细的解析配置，比如如下配置，parserOptions就具体指定了@typescript-eslint/parser解析器应该支持最新版本的es标准<code>（&quot;ecmaVersion&quot;: &quot;latest&quot;）</code>以及项目的模块化标准为<code>esModule（&quot;sourceType&quot;: &quot;module&quot;）</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;ecmaVersion&quot;</span><span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="globals-env" tabindex="-1"><a class="header-anchor" href="#globals-env"><span>globals &amp; env</span></a></h3><p>globals是定义全局变量，规定他们可不可以重写以及是否被禁用，env就是一组globals预设（一组打包的globals配置），如下配置：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;globals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明 jQuery 对象为全局变量</span>
    <span class="token string">&quot;$&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// true表示该变量为 writeable，而 false 表示 readonly, 即不可重写$</span>
    <span class="token string">&quot;jQuery&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Promise&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span> <span class="token comment">// 禁用Promise</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;es6&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 启用es6这个预设，里面肯定包含了若干globals配置来对es6进行支持</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rules-plugins-extends" tabindex="-1"><a class="header-anchor" href="#rules-plugins-extends"><span>rules &amp; plugins &amp; extends</span></a></h3><p>rules就是具体的eslint进行语法检查所依据的规则；但是官方只提供了关于标准js的检查规则，所以需要plugins来拓展规则集合，比如针对用Vite创建的react + Ts的项目，就通过react-refresh这个plugin拓展了eslint的规则，但plugins中拓展的规则默认不开启，所以plugins要与rules配合使用来拓展eslint的功能；但是我们总不可能把所有规则一条一条的写在rules中，extends就相当于一组配置好的rules与plugins组合，解决了这个痛点。</p><p>rules中的规则优先级最高，会覆盖拓展以及插件中引入的规则。 一般来说规则的值有三个值，只需控制是开启还是关闭：</p><ul><li>off 或 0：关闭规则</li><li>warn 或 1：开启规则，warn 级别的错误 (不会导致程序退出)</li><li>error 或 2：开启规则，error级别的错误(当被触发的时候，程序会退出)</li></ul><p>如&quot;eqeqeq&quot;: &quot;off&quot;。有的规则有自己的属性，使用起来像这样：&quot;quotes&quot;: [&quot;error&quot;, &quot;double&quot;]。具体内容查看规则文档。</p><h3 id="文件级别的配置优先级" tabindex="-1"><a class="header-anchor" href="#文件级别的配置优先级"><span>文件级别的配置优先级</span></a></h3><p>我们的项目中可以存在多个eslint配置文件，那么文件进行eslint检查时，文件所处位置向上直至文件系统的根目录路径上所有的eslint配置文件都会生效，但是越”靠近“文件的配置优先级越高（可以理解为高优先级规则覆盖低优先级规则）。 如下，source.js使用配置A，但是test.js使用配置B和配置A，但是配置B中的规则会覆盖掉A中相同的规则。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code>your-project
├── .eslintrc  - eslint配置A
├── lib
│ └── source.js
└─┬ childFolder
  ├── .eslintrc - eslint配置B
  └── test.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项<code>&quot;root&quot;: true</code>可以阻止继续递归的查找比较远的根目录。 package.json中也可以对eslint进行配置，所以项目中文件的eslint配置文件可以总结为：</p><p>与要检测的文件在同一目录下的 <code>.eslintrc.*</code> 或 <code>package.json</code> 文件 继续在父级目录寻找 <code>.eslintrc</code> 或 <code>package.json</code>文件，直到根目录（包括根目录）或直到发现一个有<code>&quot;root&quot;: true</code>的配置。</p><h3 id="vscode中的使用" tabindex="-1"><a class="header-anchor" href="#vscode中的使用"><span>vscode中的使用</span></a></h3><p>在vscode中安装eslint插件之后，无需在命令行中手动执行eslint命令即可在编码时实时提供eslint语法检查，而且也可以开启eslint的代码格式化功能，需要进行如下vscode配置</p><p><code>ctrl + shift + p</code>打开搜索栏搜索<code>settings.json</code>配置文件，项目内生成<code>.vscode</code>文件夹，在其下的<code>settings.json</code>中新增配置：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;[typescriptreact]&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意为对tsx语言进行保存时格式化。</p><p>支持的语言：</p><div class="language-ini line-numbers-mode" data-ext="ini" data-title="ini"><pre class="language-ini"><code>javascript;
javascriptreact;
typescript;
typescriptreact;
json;
graphql;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vue-cli5-0-8中的默认eslint配置" tabindex="-1"><a class="header-anchor" href="#vue-cli5-0-8中的默认eslint配置"><span>vue-cli5.0.8中的默认eslint配置</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 指定了环境，这里是 Node.js 环境。这意味着 ESLint 会检查 JavaScript 代码，确保符合 Node.js 的环境。</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 继承其他规则，即预设的规则配置</span>
  <span class="token comment">// 1. plugin:vue/essential 使用了 Vue.js 官方 ESLint 插件，包含了 Vue.js 开发时常见的规则</span>
  <span class="token comment">// 2. 使用了 ESLint 官方的推荐规则</span>
  <span class="token comment">// 3. 使用了 Prettier 插件的推荐规则，确保 ESLint 和 Prettier 协同工作</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;plugin:vue/essential&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eslint:recommended&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;plugin:prettier/recommended&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 指定了解析器为 Babel 的 ESLint 解析器。这使得 ESLint 能够理解一些新的 JavaScript 语法特性，比如箭头函数、解构赋值等</span>
    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&#39;@babel/eslint-parser&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;no-console&#39;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;warn&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;no-debugger&#39;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;warn&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;off&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),l=[p];function i(o,r){return n(),a("div",null,l)}const u=s(t,[["render",i],["__file","eslint.html.vue"]]),d=JSON.parse('{"path":"/engineering/standard/eslint.html","title":"eslint","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"配置项","slug":"配置项","link":"#配置项","children":[{"level":3,"title":"parser & parserOptions","slug":"parser-parseroptions","link":"#parser-parseroptions","children":[]},{"level":3,"title":"globals & env","slug":"globals-env","link":"#globals-env","children":[]},{"level":3,"title":"rules & plugins & extends","slug":"rules-plugins-extends","link":"#rules-plugins-extends","children":[]},{"level":3,"title":"文件级别的配置优先级","slug":"文件级别的配置优先级","link":"#文件级别的配置优先级","children":[]},{"level":3,"title":"vscode中的使用","slug":"vscode中的使用","link":"#vscode中的使用","children":[]},{"level":3,"title":"vue-cli5.0.8中的默认eslint配置","slug":"vue-cli5-0-8中的默认eslint配置","link":"#vue-cli5-0-8中的默认eslint配置","children":[]}]}],"git":{"updatedTime":1712455531000,"contributors":[{"name":"zqy","email":"1324980809@qq.com","commits":1}]},"filePathRelative":"engineering/standard/eslint.md"}');export{u as comp,d as data};
